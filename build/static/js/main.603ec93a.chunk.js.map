{"version":3,"sources":["store/ethActions.js","store/ethReducers.js","store/globalActions.js","store/globalReducers.js","store/accountsActions.js","store/accountsReducers.js","store/eosActions.js","store/eosReducers.js","store/tronActions.js","store/tronReducers.js","store/store.js","withRoot.js","components/headerComponents/HeaderMenu.js","eth_services/signMessage.js","eth_services/recoverMessageSigner.js","eos_services/getDefaultEosJS.js","eth_services/createSignerWallet.js","components/headerComponents/SelectAccountEthereum.js","components/headerComponents/LoginEthereum.js","components/Header.js","tron_services/getDefaultTronWeb.js","config.js","eth_services/getDefaultWeb3.js","components/homePageComponents/Networks.js","eth_services/getNetworkNameById.js","components/homePageComponents/Accounts.js","components/helpers/EtherscanLogo.js","components/homePageComponents/MintButton.js","components/helpers/BloksLogo.js","components/homePageComponents/eos/MintButton.js","components/helpers/TronLogo.js","components/homePageComponents/tron/MintButton.js","eth_services/getCUSD.js","eth_services/updateUserBalance.js","eos_services/updateEosBalance.js","tron_services/getCUSD.js","tron_services/updateTronBalance.js","components/helpers/CarbonLogo.js","components/homePageComponents/Balances.js","components/helpers/SignMessageSnackbar.js","eth_services/sendCUSD.js","components/homePageComponents/TransferButton.js","components/homePageComponents/tron/TransferButton.js","eth_services/burnCUSD.js","components/homePageComponents/BurnButton.js","components/homePageComponents/eos/BurnButton.js","components/homePageComponents/eos/TransferButton.js","components/homePageComponents/tron/BurnButton.js","components/HomePage.js","eth_services/createAccount.js","components/helpers/Loading.js","components/accountsComponents/NewEthAccountDialog.js","eth_services/encryptAccount.js","eth_services/getJsonAddress.js","db_services/saveAccountToUser.js","components/accountsComponents/SaveEthAccountDialog.js","components/accountsComponents/EthAccounts.js","components/accountsComponents/EosAccounts.js","db_services/saveUser.js","db_services/loginUser.js","eth_services/unlockAccount.js","components/accountsComponents/IdentityDialog.js","components/AccountsPage.js","components/InformationPage.js","App.js","serviceWorker.js","index.js"],"names":["TYPES","ethActions","string","type","object","initialState","eth","user_address","user_wallet","balance_cusd","pending_mints","pending_transfers","pending_burns","PAGES","MAIN","ACCOUNTS","INFO","NETWORKS","globalActions","number","global","web3","web3_network","page","username","password","network","eos_client","tronWeb","ETH","EOS","accountsActions","account","eth_accounts","eos_accounts","eosActions","eos","client","user_name","scatter_state","tronActions","tron","rootReducer","combineReducers","state","arguments","length","undefined","action","Object","assign","concat","accounts","createStore","applyMiddleware","logger","thunk","theme","createMuiTheme","palette","primary","light","blue","main","dark","secondary","green","typography","useNextVariants","withRoot","Component","props","react_default","a","createElement","styles","es","store","CssBaseline_default","HeaderMenu","anchorEl","handleMenu","event","_this","setState","currentTarget","handleClose","goToMainPage","setPage","goToAccountsPage","goToInfoPage","this","open","Boolean","IconButton_default","aria-owns","aria-haspopup","onClick","color","Info_default","Menu_default","id","anchorOrigin","vertical","horizontal","transformOrigin","onClose","MenuItem_default","React","connect","dispatch","withStyles","signMessage","_ref","asyncToGenerator","regenerator_default","mark","_callee","dataToSign","from","signer_wallet","privateKey","sig","wrap","_context","prev","next","abrupt","sign","signature","Promise","resolve","reject","personal","err","stop","_x","_x2","_x3","_x4","apply","recoverMessageSigner","message","user","recover","sent","EOS_NETWORK","blockchain","protocol","host","port","chainId","EOS_RPC_URL","rpc","JsonRpc","CONTRACT_CODE","CURRENCY_PRECISION","transactionOptions","blocksBehind","expireSeconds","broadcast","createSignerWallet","decryptedJson","ethers","Wallet","findWalletFromAddress","address","array","i","SelectAccountEthereum","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleEntering","radioGroupRef","focus","signInToSelectedAccount","selectedAddress","wallet","unlockedAccount","value","createWalletFromUnlockedJson","setEthWallet","setEthAddress","onCloseHandler","unlocking","console","error","handleChangeDialog","handleChangeForm","name","defineProperty","target","_this2","_this$props","classes","other","objectWithoutProperties","Dialog_default","onEntering","DialogTitle_default","DialogContent_default","RadioGroup_default","ref","aria-label","onChange","map","FormControlLabel_default","key","control","Radio_default","label","substring","DialogActions_default","Button_default","LoginEthereum","handleClick_LoginMenu","handleClick_LoginMenu_Tron","ready","defaultAddress","setTronAddress","alert","handleClick_LoginMenu_Eos","identity","logout","login","find","x","Api","beta3","setEOS","setEosName","loginMetaMask","_callee2","messageToSign","signer","_context2","signing_in","getAccounts","window","t0","loginCarbonWallet","openSelectDialog","closeSelectDialog","_this$state","disabled","variant","headerComponents_SelectAccountEthereum","setScatterState","Header","user_address_tron","short_name","short_name_tron","base58","AppBar_default","position","Toolbar_default","headerComponents_HeaderMenu","Typography_default","className","grow","role","headerComponents_LoginEthereum","NUMBER","flexGrow","HttpProvider","TronWeb","providers","NODE_URL","fullNode","solidityNode","getDefaultTronWeb","commonConfig","server_url","infura_public_key","getDefaultWeb3","WEB_3_NODE","default_web3","default_network","config","Web3","WebsocketProvider","net","getId","Networks","_checkScatterConnection","scatter","ScatterJS","plugins","ScatterEOS","_checkTronConnection","default_tronweb","setTronWeb","_checkEthereumConnection","_callee3","_network","_context3","setWeb3","setWeb3Network","ethereum","enable","log","currentProvider","componentDidMount","_callee4","intervalId","_context4","setInterval","timer","_callee5","_context5","componentWillUnmount","clearInterval","handleChange","current","setNetwork","Error","Paper_default","paper","elevation","FormControl_default","formControl","InputLabel_default","htmlFor","Select_default","native","age","inputProps","NETWORK","tronweb","paddingTop","spacing","unit","paddingBottom","marginTop","marginBottom","marginLeft","marginRight","margin","minWidth","getNetworkNameById","networkId","networkName","Accounts","eth_address","tron_address","eos_name","user_short","user_short_tron","href","rel","EtherscanLogo","style","height","width","alt","src","MINTER_ENDPOINT","MintButton","handleClick_Mint","amountToMint","to","post_data","minter_status","response","pending_hash","utils","toWei","amount_to_mint","isAddress","amount","toString","minting","axios","get","data","minter_balance","post","concatPendingMints","t1","helpers_EtherscanLogo","newMint","BloksLogo","transaction_id","helpers_BloksLogo","TronLogo","parseFloat","Math","pow","user_hex","transaction_hash","helpers_TronLogo","getCUSD","abi","require","Contract","updateUserBalance","cusd","balance","short_balance","methods","balanceOf","fromWei","updateEosBalance","result","get_table_rows","code","scope","table","rows","split","ABI","ADDRESS","contract_base58_address","networks","fromHex","contract","at","updateTronBalance","decimal","converted","CarbonLogo","Balances","_updateUserBalance","setEthBalance","_updateEosBalance","oldBalance","newBalance","eos_balance_cusd","setEosBalance","_updateTronBalance","_ref3","balance_cusd_tron","setTronBalance","hex","helpers_CarbonLogo","SignMessageSnackbar","Snackbar_default","autoHideDuration","ContentProps","aria-describedby","sendCUSD","eth_wallet","_web3$utils","crafted_transaction","nonce","metatoken","reward","metaTx","hash","isNaN","transfer","replayNonce","options","estimateGas","t2","ceil","toTwosComplement","soliditySha3","transferRecipient","signerNonce","t3","_x5","RELAYER_ENDPOINT","TransferButton","handleClick_Transfer","amountToTransfer","relayer_status","amount_to_transfer","transfer_to","transferring","balance_relayer","concatPendingTransfers","TextField_default","textField","helpers_SignMessageSnackbar","newTransfer","to_base58","send","burnCUSD","stablecoin","burnCarbonDollar","BurnButton","handleClick_Burn","amountToBurn","amount_to_burn","burning","concatPendingBurns","newBurn","resultWithConfig","eos_api","transact","actions","authorization","actor","permission","quantity","toFixed","memo","burn","HomePage","homePageComponents_Networks","homePageComponents_Accounts","homePageComponents_MintButton","eos_MintButton","tron_MintButton","homePageComponents_Balances","homePageComponents_TransferButton","eos_TransferButton","tron_TransferButton","homePageComponents_BurnButton","eos_BurnButton","tron_BurnButton","callback_encrypt","progress","percentComplete","parseInt","createAccount","randomWallet","encryptedJson","createRandom","encrypt","Loading","NewEthAccountDialog","generateNewAccount","new_account_json","creating_account","createAccount_eth","addEthAccount","aria-labelledby","helpers_Loading","CircularProgress_default","disableShrink","facebook2","size","thickness","newAccount","animationDuration","left","encryptAccount","wallet_json","getJsonAddress","getJsonWalletAddress","WALLETS_ENDPOINT","saveAccountToUser","encrypted_json","db_post_response","new_wallets_key","new_wallet","accountName","JSON","stringify","parse","wallet_key","SaveEthAccountDialog","saveAccount","new_account_index","identityToAssociateWithAccount","new_account","address_from_encrypted_json","saved_wallet","saving","createEncryptedWallet","open_new_account_dialog","account_index","Save_default","section","textAlign","EthAccounts","handleClick_AddEthAccount","handleClose_AddEthAccount","accountsComponents_SaveEthAccountDialog","accountsComponents_NewEthAccountDialog","EosAccounts","handleClick_AddEosAccount","addEosAccount","USERS_ENDPOINT","saveUser","new_user_id","new_password","loginUser","params","db_get_response","user_id","user_password","user_wallets","chainAccounts","wallets","callback_decrypt","unlockWallet","encryptedJsonFile","fromEncryptedJson","IdentityDialog","confirm_password","new_user","new_username","clearEthAccounts","loading_server","setUsername","setPassword","signInOldAccount","existing_user","existing_username","existing_password","existing_wallets","encrypted_wallet","decrypted_wallet","keys","unlockAccount","toggleSignInDialog","showSignIn","openSignInDialog","canCreateNew","canSignIn","DialogContentText_default","Switch_default","checked","autoFocus","fullWidth","AccountsPage","generateNewIdentity","openIdentityDialog","logoutIdentity","closeIdentityDialog","signed_in","wallet_name","Tooltip_default","title","placement","button","AccountCircle_default","Clear_default","accountsComponents_IdentityDialog","accountsComponents_EthAccounts","accountsComponents_EosAccounts","InformationPage","App","root","components_Header","components_HomePage","information","components_InformationPage","components_AccountsPage","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.603ec93a.chunk.js","sourcesContent":["// List of all actions that can be dispatched to redux store\nexport const TYPES = {\n  SET_ETH_ADDRESS: \"SET_ETH_ADDRESS\",\n  SET_ETH_WALLET: \"SET_ETH_WALLET\",\n  SET_ETH_BALANCE: \"SET_ETH_BALANCE\",\n  CONCAT_PENDING_MINTS: \"CONCAT_PENDING_MINTS\",\n  CONCAT_PENDING_TRANSFERS: \"CONCAT_PENDING_TRANSFERS\",\n  CONCAT_PENDING_BURNS: \"CONCAT_PENDING_BURNS\",\n};\n\nexport const ethActions = {\n  setEthAddress: string => ({\n    type: TYPES.SET_ETH_ADDRESS,\n    string\n  }),\n  // Set user eth account\n\n  setEthWallet: object => ({\n    type: TYPES.SET_ETH_WALLET,\n    object\n  }),\n  // Set user eth wallet that they can sign messages from\n\n  setEthBalance: string => ({\n    type: TYPES.SET_ETH_BALANCE,\n    string\n  }),\n  // Set cusd-eth balance\n\n  concatPendingMints: object => ({\n    type: TYPES.CONCAT_PENDING_MINTS,\n    object\n  }),\n  // Add a pending mint transaction to user profile\n\n  concatPendingTransfers: object => ({\n    type: TYPES.CONCAT_PENDING_TRANSFERS,\n    object\n  }),\n  // Add a pending transfer transaction to user profile\n\n  concatPendingBurns: object => ({\n    type: TYPES.CONCAT_PENDING_BURNS,\n    object\n  }),\n  // Add a pending burn transaction to user profile\n\n\n};\n\n","import { TYPES } from \"./ethActions\";\n\n// Initial state\nexport const initialState = {\n  eth: {\n    user_address: '',\n    user_wallet: '',\n    balance_cusd: '',\n    pending_mints: [],\n    pending_transfers: [],\n    pending_burns: [],\n  },\n};\n\n// User Ethereum account state\nexport const eth = (state = initialState.eth, action) => {\n  switch (action.type) {\n    case TYPES.SET_ETH_ADDRESS:\n      return Object.assign({}, state, {\n        user_address: action.string\n      });\n    case TYPES.SET_ETH_WALLET:\n      return Object.assign({}, state, {\n        user_wallet: action.object\n      });\n    case TYPES.SET_ETH_BALANCE:\n      return Object.assign({}, state, {\n        balance_cusd: action.string\n      });\n    case TYPES.CONCAT_PENDING_MINTS:\n      return Object.assign({}, state, {\n        pending_mints: state.pending_mints.concat(action.object)\n      });\n    case TYPES.CONCAT_PENDING_TRANSFERS:\n      return Object.assign({}, state, {\n        pending_transfers: state.pending_transfers.concat(action.object)\n      });\n    case TYPES.CONCAT_PENDING_BURNS:\n      return Object.assign({}, state, {\n        pending_burns: state.pending_burns.concat(action.object)\n      });\n    default:\n      return state;\n  }\n};\n\n","// List of all actions that can be dispatched to redux store\nexport const TYPES = {\n  SET_TRONWEB: \"SET_TRONWEB\",\n  SET_WEB3: \"SET_WEB3\",\n  SET_WEB3_NETWORK: \"SET_WEB3_NETWORK\",\n  SET_PAGE: \"SET_PAGE\",\n  SET_USERNAME: \"SET_USERNAME\",\n  SET_PASSWORD: \"SET_PASSWORD\",\n  SET_NETWORK: \"SET_NETWORK\",\n  SET_EOS: \"SET_EOS\"\n};\n\n// Page options for main site\nexport const PAGES = {\n  MAIN: 0,\n  ACCOUNTS: 1,\n  INFO: 2\n}\n\n// Network options for home page\nexport const NETWORKS = {\n  ETH: 0,\n  EOS: 1,\n  TRON: 2\n}\n\nexport const globalActions = {\n  setPage: number => ({\n    type: TYPES.SET_PAGE,\n    number\n  }), \n  // Set Page\n\n  setWeb3: object => ({\n    type: TYPES.SET_WEB3,\n    object\n  }), \n  // Set Web3 object\n\n  setWeb3Network: number => ({\n    type: TYPES.SET_WEB3_NETWORK,\n    number\n  }), \n  // Set Web3 network ID number\n\n  setUsername: string => ({\n    type: TYPES.SET_USERNAME,\n    string\n  }), \n  // Set User identity key: 'username'\n\n  setPassword: string => ({\n    type: TYPES.SET_PASSWORD,\n    string\n  }), \n  // Set User identity key: 'password'\n\n\n  setEOS: object => ({\n    type:TYPES.SET_EOS,\n    object\n  }),\n  // Set EOS object\n\n  setTronWeb: object => ({\n    type: TYPES.SET_TRONWEB,\n    object\n  }), \n  // Set TronWeb object\n\n  setNetwork: number => ({\n    type: TYPES.SET_NETWORK,\n    number\n  }),\n  // Set cryptonetwork\n\n};\n\n","import { TYPES, PAGES, NETWORKS } from \"./globalActions\";\n\n// Initial state\nexport const initialState = {\n  global: {\n    web3: '',\n    web3_network: '',\n    page: PAGES.MAIN,\n    username: '',\n    password: '',\n    network: NETWORKS.ETH,\n    eos_client: '',\n    tronWeb: '',\n  },\n};\n\n// Global app state\nexport const global = (state = initialState.global, action) => {\n  switch (action.type) {\n    case TYPES.SET_WEB3:\n      return Object.assign({}, state, {\n        web3: action.object\n      });\n    case TYPES.SET_WEB3_NETWORK:\n      return Object.assign({}, state, {\n        web3_network: action.number\n      });\n    case TYPES.SET_PAGE:\n      return Object.assign({}, state, {\n        page: action.number\n      });\n    case TYPES.SET_USERNAME:\n      return Object.assign({}, state, {\n        username: action.string\n      });\n    case TYPES.SET_PASSWORD:\n      return Object.assign({}, state, {\n        password: action.string\n      });\n    case TYPES.SET_NETWORK:\n      return Object.assign({}, state, {\n        network: action.number\n      });\n    case TYPES.SET_EOS:\n      return Object.assign({}, state, {\n        eos_client:action.object\n      });\n    case TYPES.SET_TRONWEB:\n      return Object.assign({}, state, {\n        tronWeb: action.object\n      });\n    default:\n      return state;\n  }\n};\n\n","// List of all actions that can be dispatched to redux store\nexport const TYPES = {\n  ADD_ETH_ACCOUNT: \"ADD_ETH_ACCOUNT\",\n  ADD_EOS_ACCOUNT: \"ADD_EOS_ACCOUNT\",\n  CLEAR_ETH_ACCOUNTS: \"CLEAR_ETH_ACCOUNTS\"\n};\n\n// Mapping of all blockchain networks that accounts can exist on\nexport const NETWORKS ={\n  ETH: 0,\n  EOS: 1\n}\n\nexport const accountsActions = {\n  addEthAccount: object => ({\n    type: TYPES.ADD_ETH_ACCOUNT,\n    object\n  }),\n  // add an ETH account object\n\n  clearEthAccounts: object => ({\n    type: TYPES.CLEAR_ETH_ACCOUNTS\n  }),\n  // add an ETH account object\n\n  addEosAccount: object => ({\n    type: TYPES.ADD_EOS_ACCOUNT,\n    object\n  }),\n  // add an EOS account object\n\n};\n\n","import { TYPES } from \"./accountsActions\";\n\n// Initial state\nexport const initialState = {\n  account: {\n      eth_accounts: [],\n      eos_accounts: [],\n  },\n};\n\n// Account/Identity management state\nexport const accounts = (state = initialState.account, action) => {\n  switch (action.type) {\n    case TYPES.ADD_ETH_ACCOUNT:\n      return Object.assign({}, state, {\n        eth_accounts: state.eth_accounts.concat(action.object)\n      });\n    case TYPES.CLEAR_ETH_ACCOUNTS:\n      return Object.assign({}, state, {\n        eth_accounts: []\n      });\n    case TYPES.ADD_EOS_ACCOUNT:\n      return Object.assign({}, state, {\n        eos_accounts: state.eos_accounts.concat(action.object)\n      });\n    default:\n      return state;\n  }\n};\n\n","// List of all actions that can be dispatched to redux store\nexport const TYPES = {\n  SET_EOS_CLIENT: \"SET_EOS_CLIENT\",\n  SET_EOS_NAME: \"SET_EOS_NAME\",\n  CONCAT_PENDING_MINTS_EOS: \"CONCAT_PENDING_MINTS_EOS\",\n  CONCAT_PENDING_BURNS_EOS: \"CONCAT_PENDING_BURNS_EOS\",\n  CONCAT_PENDING_TRANSFERS_EOS: \"CONCAT_PENDING_TRANSFERS_EOS\",\n  SET_EOS_BALANCE: \"SET_EOS_BALANCE\",\n  SET_SCATTER_STATE: \"SET_SCATTER_STATE\"\n};\n\nexport const eosActions = {\n  setEosClient: object => ({\n  \ttype: TYPES.SET_EOS_CLIENT,\n  \tobject\n  }),\n  setEosName: string => ({\n    type: TYPES.SET_EOS_NAME,\n    string\n  }),\n  concatPendingMints: object => ({\n    type: TYPES.CONCAT_PENDING_MINTS_EOS,\n    object\n  }),\n  concatPendingBurns: object => ({\n    type: TYPES.CONCAT_PENDING_BURNS_EOS,\n    object\n  }),\n  concatPendingTransfers: object => ({\n    type: TYPES.CONCAT_PENDING_TRANSFERS_EOS,\n    object\n  }),\n  setEosBalance: string => ({\n    type: TYPES.SET_EOS_BALANCE,\n    string\n  }),\n  setScatterState: string => ({\n    type:TYPES.SET_SCATTER_STATE,\n    string\n  }),\n\n\n};\n\n","import { TYPES } from \"./eosActions\";\n\n// Initial state\nexport const initialState = {\n  eos: {\n    client: '',\n    user_name: '',\n    balance_cusd: '',\n    pending_mints: [],\n    pending_burns: [],\n    pending_transfers: [],\n    scatter_state:'',\n  },\n};\n\n// User Eos account state\nexport const eos = (state = initialState.eos, action) => {\n  switch (action.type) {\n    case TYPES.SET_EOS_CLIENT:\n      return Object.assign({}, state, {\n        client: action.object\n      });\n    case TYPES.SET_EOS_NAME:\n      return Object.assign({}, state, {\n        user_name: action.string\n      });\n    case TYPES.CONCAT_PENDING_MINTS_EOS:\n      return Object.assign({}, state, {\n        pending_mints: state.pending_mints.concat(action.object)\n      });\n    case TYPES.CONCAT_PENDING_BURNS_EOS:\n      return Object.assign({}, state, {\n        pending_burns: state.pending_burns.concat(action.object)\n      });\n    case TYPES.CONCAT_PENDING_TRANSFERS_EOS:\n      return Object.assign({}, state, {\n        pending_transfers: state.pending_transfers.concat(action.object)\n      });\n    case TYPES.SET_EOS_BALANCE:\n      return Object.assign({}, state, {\n        balance_cusd: action.string\n      });\n    case TYPES.SET_SCATTER_STATE:\n      return Object.assign({}, state, {\n        scatter_state: action.string\n      });\n\n    default:\n      return state;\n  }\n};\n\n","// List of all actions that can be dispatched to redux store\nexport const TYPES = {\n    SET_TRON_ADDRESS: \"SET_TRON_ADDRESS\",\n    SET_TRON_BALANCE: \"SET_TRON_BALANCE\",\n    CONCAT_PENDING_MINTS_TRON: \"CONCAT_PENDING_MINTS_TRON\",\n    CONCAT_PENDING_BURNS_TRON: \"CONCAT_PENDING_BURNS_TRON\",\n    CONCAT_PENDING_TRANSFERS_TRON: \"CONCAT_PENDING_TRANSFERS_TRON\",\n  };\n  \n  export const tronActions = {\n    setTronAddress: string => ({\n      type: TYPES.SET_TRON_ADDRESS,\n      string\n    }),\n    // Set user tron account\n\n    setTronBalance: string => ({\n      type: TYPES.SET_TRON_BALANCE,\n      string\n    }),\n    // Set cusd-tron balance\n\n    concatPendingMints: object => ({\n      type: TYPES.CONCAT_PENDING_MINTS_TRON,\n      object\n    }),\n    // Add a pending mint transaction to user profile\n\n    concatPendingBurns: object => ({\n      type: TYPES.CONCAT_PENDING_BURNS_TRON,\n      object\n    }),\n    // Add a pending burn transaction to user profile\n    \n    concatPendingTransfers: object => ({\n      type: TYPES.CONCAT_PENDING_TRANSFERS_TRON,\n      object\n    }),\n    // Add a pending transfer transaction to user profile\n\n};\n  \n  ","import { TYPES } from \"./tronActions\";\n\n// Initial state\nexport const initialState = {\n  tron: {\n    user_address: '',\n    balance_cusd: '',\n    pending_mints: [],\n    pending_burns: [],\n    pending_transfers: [],\n  },\n};\n\n// User Tron account state\nexport const tron = (state = initialState.tron, action) => {\n  switch (action.type) {\n    case TYPES.SET_TRON_ADDRESS:\n      return Object.assign({}, state, {\n        user_address: action.string\n      });\n    case TYPES.SET_TRON_BALANCE:\n      return Object.assign({}, state, {\n        balance_cusd: action.string\n      });\n    case TYPES.CONCAT_PENDING_MINTS_TRON:\n      return Object.assign({}, state, {\n        pending_mints: state.pending_mints.concat(action.object)\n      });\n    case TYPES.CONCAT_PENDING_BURNS_TRON:\n      return Object.assign({}, state, {\n        pending_burns: state.pending_burns.concat(action.object)\n      });\n    case TYPES.CONCAT_PENDING_TRANSFERS_TRON:\n      return Object.assign({}, state, {\n        pending_transfers: state.pending_transfers.concat(action.object)\n      });\n    default:\n      return state;\n  }\n};\n\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport logger from \"redux-logger\"; // Debuggin: prints redux actions to console\n\n// Redux Reducers to add to global state\nimport { eth } from \"./ethReducers\";\nimport { global } from \"./globalReducers\";\nimport { accounts } from \"./accountsReducers\";\nimport { eos } from \"./eosReducers\";\nimport { tron } from \"./tronReducers\";\n\n\n// Add all reducers here to aggregate into one store\nconst rootReducer = combineReducers({\n  eos,\n  tron,\n  eth,\n  global,\n  accounts\n});\n\n// Import store from createStore() => store\nexport default createStore(rootReducer, {}, applyMiddleware(logger, thunk));\n","import React from 'react';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport blue from '@material-ui/core/colors/blue';\nimport green from '@material-ui/core/colors/green';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { Provider } from \"react-redux\";\nimport store from \"./store/store\";\n\n// A theme with custom primary and secondary color.\n// It's optional.\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: blue[300],\n      main: blue[500],\n      dark: blue[700],\n    },\n    secondary: {\n      light: green[300],\n      main: green[500],\n      dark: green[700],\n    },\n  },\n  typography: {\n    useNextVariants: true,\n  },\n});\n\nfunction withRoot(Component) {\n  function WithRoot(props) {\n    // MuiThemeProvider makes the theme available down the React tree\n    // thanks to React context.\n    return (\n      <MuiThemeProvider theme={theme}>\n        <Provider store={store}> \n        {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n        <CssBaseline />\n        <Component {...props} />\n        </Provider>\n      </MuiThemeProvider>\n    );\n  }\n\n  return WithRoot;\n}\n\nexport default withRoot;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport Info from '@material-ui/icons/Info';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\n\n// Redux state\nimport { connect } from \"react-redux\";\nimport { globalActions, PAGES } from \"../../store/globalActions\";\n\nconst styles = {\n};\n\nconst mapState = state => ({\n  page: state.global.page,\n  web3: state.global.web3\n})\n\nconst mapDispatch = dispatch => ({\n  setPage: number => dispatch(globalActions.setPage(number))\n});\n\nclass HeaderMenu extends React.Component {\n  state = {\n    anchorEl: null,\n  };\n\n  handleMenu = event => {\n    this.setState({ anchorEl: event.currentTarget });\n  };\n\n  handleClose = () => {\n    this.setState({ anchorEl: null });\n  };\n\n  /** PAGE SELECTOR: see globalActions.PAGES for more details */\n  goToMainPage = () => {\n      this.props.setPage(PAGES.MAIN)\n      this.handleClose()\n  }\n\n  goToAccountsPage = () => {\n      this.props.setPage(PAGES.ACCOUNTS)\n      this.handleClose()\n  }\n\n  goToInfoPage = () => {\n      this.props.setPage(PAGES.INFO)\n      this.handleClose()\n  }\n  /** END PAGE SELECTOR */\n\n\n  render() {\n    const { anchorEl } = this.state;\n    const open = Boolean(anchorEl);\n\n    return (\n        <div>\n                <IconButton\n                  aria-owns={open ? 'menu-appbar' : undefined}\n                  aria-haspopup=\"true\"\n                  onClick={this.handleMenu}\n                  color=\"inherit\"\n                >\n                  <Info />\n                </IconButton> \n                <Menu\n                  id=\"menu-appbar\"\n                  anchorEl={anchorEl}\n                  anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'left',\n                  }}\n                  transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'left',\n                  }}\n                  open={open}\n                  onClose={this.handleClose}\n                >\n                  <MenuItem onClick={this.goToMainPage}>Home</MenuItem>\n                  <MenuItem onClick={this.goToAccountsPage}>Accounts</MenuItem>\n                  <MenuItem onClick={this.goToInfoPage}>Information</MenuItem>\n                </Menu>\n        </div>\n\n    );\n  }\n}\n\nHeaderMenu.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default connect(mapState, mapDispatch)(withStyles(styles)(HeaderMenu));","// Request user to cryptographically sign a message\nexport const signMessage = async (web3, dataToSign, from, signer_wallet) => {\n    if (!web3) return;\n\n    // If passed in the optional parameter \"signer_wallet\", then use this wallet to sign message\n    if (signer_wallet) {\n        let privateKey = signer_wallet.privateKey\n        let sig = web3.eth.accounts.sign(dataToSign, privateKey)\n        return sig.signature\n    } else {\n      // Else ask injected web3 provider to sign\n      return new Promise((resolve, reject) =>\n        web3.eth.personal.sign(\n          dataToSign,\n          from,\n          (err, signature) => {\n            if (err) return reject(err);\n            return resolve(signature);\n          }\n        )\n      );\n    }\n  };","  // Get user who signed a message\n  export const recoverMessageSigner = async (\n      web3,\n      message,\n      signature\n  ) => {\n      if (!web3) return;\n      let user = await web3.eth.accounts.recover(\n        message, signature\n      )\n      return user\n  }","import { JsonRpc } from 'eosjs';\n\nexport const EOS_NETWORK = { /** Change this to connect to Mainnet/Jungle */\n  blockchain: \"eos\",\n  protocol: \"https\",\n  host: \"jungle2.cryptolions.io\",\n  port: 443,\n  chainId: \"e70aaab8997e1dfce58fbfac80cbbb8fecec7b99cf982a9444273cbc64c41473\" \n};\nexport const EOS_RPC_URL = EOS_NETWORK.protocol+\"://\"+EOS_NETWORK.host+\":\"+EOS_NETWORK.port\n\nexport const rpc = new JsonRpc(EOS_RPC_URL);\n\n// Contract details for CUSD\nexport const CONTRACT_CODE = \"carbon12nick\"\nexport const CURRENCY_PRECISION = 2\n\n// EosJS transaction options\nexport const transactionOptions = {\n  blocksBehind: 3,\n  expireSeconds: 30,\n  broadcast:true\n}","import { ethers } from 'ethers';\n\n// Create a wallet object capable of signing transaction\nconst createSignerWallet = (decryptedJson) => {\n    let privateKey = decryptedJson.privateKey\n    let wallet = new ethers.Wallet(privateKey)\n    return wallet\n}\n\nexport default createSignerWallet\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Dialog from '@material-ui/core/Dialog';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Radio from '@material-ui/core/Radio';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\n// Redux state\nimport { connect } from \"react-redux\";\nimport { ethActions } from \"../../store/ethActions\";\n\n// Get wallet object capable of signing transactions from a decrypted wallet json\nimport createWalletFromUnlockedJson from '../../eth_services/createSignerWallet'\n\nconst mapState = state => ({\n    eth_accounts: state.accounts.eth_accounts\n})\n\nconst mapDispatch = dispatch => ({\n    setEthAddress: address => dispatch(ethActions.setEthAddress(address)),\n    setEthWallet: wallet => dispatch(ethActions.setEthWallet(wallet))\n});\n\nconst styles = theme => ({\n});\n\nconst findWalletFromAddress = (address, array) => {\n    for (var i = 0; i < array.length; i++) {\n        if (array[i].address === address) {\n            return array[i]\n        }\n    }\n}\n\nclass SelectAccountEthereum extends React.Component {\n  constructor(props) {\n    super();\n\n    this.state = {\n      value: '',\n    };\n  }\n\n  handleEntering = () => {\n    this.radioGroupRef.focus();\n  };\n\n  signInToSelectedAccount = async () => {\n    let selectedAddress = this.state.value\n    let wallet = findWalletFromAddress(selectedAddress, this.props.eth_accounts)\n    let unlockedAccount = wallet\n\n    try {\n        // Save account, wallet, and close dialog\n        let signer_wallet = createWalletFromUnlockedJson(unlockedAccount) \n        this.props.setEthWallet(signer_wallet)         \n        this.props.setEthAddress(unlockedAccount.address) \n        this.props.onCloseHandler()\n    } catch (err) {\n        this.setState({\n            unlocking: false,\n        })\n        console.error('ERROR: could not unlock account')\n    }\n  }\n\n  handleChangeDialog = (event, value) => {\n    this.setState({ value });\n  };\n\n  handleChangeForm = name => event => {\n    this.setState({\n        [name]: event.target.value,\n    });\n  };\n\n  render() {\n    const { \n        open, \n        classes,\n        onCloseHandler,\n        eth_accounts, \n        ...other } = this.props;\n    const {\n        value,\n    } = this.state\n\n    return (\n      <Dialog\n        onEntering={this.handleEntering}\n        open={open}\n        onClose={onCloseHandler}\n        {...other}\n      >\n        <DialogTitle id=\"confirmation-dialog-title\">Your Ethereum Accounts</DialogTitle>\n        <DialogContent>\n          <RadioGroup\n            ref={ref => {\n              this.radioGroupRef = ref;\n            }}\n            aria-label=\"Account\"\n            name=\"account_address\"\n            value={value}\n            onChange={this.handleChangeDialog}\n          >\n            {eth_accounts.map(account => (\n              <FormControlLabel value={account.address} key={account.address} control={<Radio />} label={account.address.substring(0,12)+\"...\"} />\n            ))}\n          </RadioGroup>\n        </DialogContent>\n        <DialogActions>\n            <Button onClick={onCloseHandler} color=\"primary\">\n                Cancel\n            </Button>\n            <Button \n                onClick={this.signInToSelectedAccount} \n                color=\"primary\"\n            >\n                Unlock\n            </Button>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n}\n\nSelectAccountEthereum.propTypes = {\n    classes: PropTypes.object.isRequired,\n    open: PropTypes.bool.isRequired,\n    onCloseHandler: PropTypes.func.isRequired\n  };\n  \nexport default connect(mapState, mapDispatch)(withStyles(styles)(SelectAccountEthereum));","import React, { Component } from 'react';\nimport withRoot from '../../withRoot';\nimport PropTypes from 'prop-types';\n\n// Material-ui\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button'\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\n// WEB3 Services\nimport { signMessage } from '../../eth_services/signMessage'\nimport { recoverMessageSigner } from '../../eth_services/recoverMessageSigner'\n\n// EOS services\nimport {Api} from 'eosjs';\nimport { rpc, EOS_NETWORK } from '../../eos_services/getDefaultEosJS'\n\n// Redux state\nimport { connect } from \"react-redux\";\nimport { ethActions } from \"../../store/ethActions\";\nimport { eosActions } from \"../../store/eosActions\";\nimport { globalActions } from \"../../store/globalActions\";\nimport { tronActions } from \"../../store/tronActions\"\nimport SelectAccountEthereum from \"./SelectAccountEthereum\"\n\nconst styles = theme => ({\n});\n\nconst mapState = state => ({\n  network: state.global.network,\n  web3: state.global.web3,\n  eth_accounts: state.accounts.eth_accounts,\n  tronWeb: state.global.tronWeb,\n  scatter_state: state.eos.scatter_state\n})\n\nconst mapDispatch = dispatch => ({\n  setEthAddress: address => dispatch(ethActions.setEthAddress(address)),\n  setEthWallet: wallet => dispatch(ethActions.setEthWallet(wallet)),\n  setTronAddress: address => dispatch(tronActions.setTronAddress(address)),\n  setEOS:  client => dispatch(globalActions.setEOS(client)),\n  setEosName: name => dispatch(eosActions.setEosName(name)),\n  setScatterState: string => dispatch(eosActions.setScatterState(string)),\n});\n\nclass LoginEthereum extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      signing_in: false,\n      anchorEl: null,\n      openSelectDialog: false\n    };\n  }\n\n  /** ASK USER TO SELECT LOGIN METHOD FOR ETHEREUM */\n  handleClick_LoginMenu = event => {\n    this.setState({ anchorEl: event.currentTarget });\n  };\n\n  /** DETECT IF USER IS LOGGED IN TO TRON */\n  handleClick_LoginMenu_Tron = () => {\n    if (!this.props.tronWeb) {\n      alert('Switch to a Tron dApp browser to use this faucet for the time being, apologies!')\n      return\n    }\n    let loggedIn = this.props.tronWeb.ready\n    if (loggedIn && this.props.tronWeb.defaultAddress) {\n      this.props.setTronAddress(this.props.tronWeb.defaultAddress)\n    } else {\n      alert('You are connected to Tron, but we cannot detect your address! Please login to your Tron wallet to use this faucet-- if you are on desktop then try installing the TronLink browser extension')\n    }\n  }\n\n  /** Request user's EOS identity through Scatter */\n  handleClick_LoginMenu_Eos = async () => {\n    if (!this.props.scatter_state) { return; }\n    if (this.props.scatter_state.identity) {\n      // User already signed in, forget their previous identity\n      await this.props.scatter_state.logout()\n    } \n    \n    // Now, request user to connect their identity for app usage\n    // After a user has approved giving you permission to access their Identity you no longer have to call getIdentity() if the user refreshes the page. \n    // Instead you can check if an Identity exists on the scatter object itself. \n    // This also means that you don't have to save the Identity within your shared \n    // services along-side your Scatter reference, \n    // you can simply save your Scatter reference and \n    // pull the identity from within it.\n    //\n    // n.b. this is the reason why we call logout() on each button press to allow user to switch their identity\n    let identity = await this.props.scatter_state.login({ accounts: [EOS_NETWORK]})\n    if (!identity) { return console.error(`No Scatter identity found on this network`)}\n\n    const account = this.props.scatter_state.identity.accounts.find(x => x.blockchain === 'eos');\n    if (account && account.name) {\n      // Create eosJS client object\n      const eos = this.props.scatter_state.eos(EOS_NETWORK, Api, {rpc, beta3:true})\n      this.props.setEOS(eos)\n      // Save user's account name (full account details are in account)\n      this.props.setEosName(account.name)\n    }\n  }\n\n  /** LOGIN HANDLERS */\n  // Ask user to authenticate their keypair\n  loginMetaMask = async () => {\n    this.setState({\n      signing_in: true\n    })\n    this.handleClose()\n    \n    let web3 = this.props.web3\n    if ( !web3 ) {\n      // No web3 injected\n      alert('we cannot detect your web3, sorry')\n      this.setState({\n        signing_in: false\n      })\n      return\n    }\n    try {\n      let accounts = await web3.eth.getAccounts()\n      let user = accounts[0]\n\n      let messageToSign = \"I am cryptographically signing this message\" \n\n      let sig = await signMessage(web3, messageToSign, user)\n      let signer = await recoverMessageSigner(\n        window.web3,\n        messageToSign,\n        sig\n      )\n      this.props.setEthAddress(signer)\n      this.props.setEthWallet('') // FIXME: !Only a Carbon account should have a signer-wallet via ethers.js!\n      this.setState({\n        signing_in: false\n      })\n    } catch (err) {\n      alert('if you do not have an Ethereum account, get a free burner account at \"Accounts\"')\n      console.error('signature failed')\n      this.setState({\n        signing_in: false\n      })\n    }\n  }\n\n  // Ask user to select a Carbon wallet (created in Accounts page)\n  loginCarbonWallet = () => {\n    this.handleClose()\n    if ( this.props.eth_accounts.length > 0 ) {\n        this.setState({\n            openSelectDialog: true\n        })\n    }\n    else {\n        alert('No accounts detected')\n    }\n  }\n\n  // Clear user address\n  logout = () => {\n      this.props.setEthAddress('')\n      this.props.setEthWallet('')\n      this.handleClose()\n  }  \n\n  /** ALWAYS CALL HANDLECLOSE() AFTER EACH LOGIN HANDLER */\n  handleClose = () => {\n    this.setState({ anchorEl: null });\n  };\n\n  /** HANDLER FOR CLOSING SELECT DIALOG */\n  closeSelectDialog = () => {\n      this.setState({\n          openSelectDialog: false\n      })\n  }\n\n  render() {\n    const { anchorEl, openSelectDialog } = this.state;\n    const { network } = this.props;\n    return (\n        \n        <div>\n          { network == 0 ? \n            <Button\n                aria-owns={anchorEl ? 'simple-menu' : undefined}\n                aria-haspopup=\"true\"\n                onClick={this.handleClick_LoginMenu}\n                disabled={this.state.signing_in}\n                variant=\"contained\"\n                color=\"primary\"\n            >\n                Sign In to Ethereum\n            </Button>\n            :\"\"}\n          { network == 1 ? \n            <Button\n                aria-owns={anchorEl ? 'simple-menu' : undefined}\n                aria-haspopup=\"true\"\n                onClick={this.handleClick_LoginMenu_Eos}\n                disabled={this.state.signing_in}\n                variant=\"contained\"\n                color=\"primary\"\n            >\n                Sign In to EOS\n            </Button>\n            :\"\"}\n          { network == 2 ? \n            <Button\n                onClick={this.handleClick_LoginMenu_Tron}\n                variant=\"contained\"\n                color=\"primary\"\n            >\n                Sign In to Tron\n            </Button>\n            :\"\"}\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                open={Boolean(anchorEl)}\n                onClose={this.handleClose}\n            >\n                <MenuItem onClick={this.loginMetaMask}>Injected Web3</MenuItem>\n                <MenuItem onClick={this.loginCarbonWallet}>Temporary Accounts</MenuItem>\n                <MenuItem onClick={this.logout}>Logout</MenuItem>\n            </Menu>\n            <SelectAccountEthereum open={openSelectDialog} onCloseHandler={this.closeSelectDialog}/>\n        \n        </div>\n        \n    );\n  }\n}\n\nLoginEthereum.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nexport default connect(mapState, mapDispatch)(withRoot(withStyles(styles)(LoginEthereum)));\n","import React, { Component } from 'react';\nimport withRoot from '../withRoot';\nimport PropTypes from 'prop-types';\n\n// Material-ui\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Typography from '@material-ui/core/Typography'\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Button from '@material-ui/core/Button';\n\n\n// Redux state\nimport { connect } from \"react-redux\";\nimport { globalActions, PAGES } from '../store/globalActions'\n\n// Custom Components\nimport HeaderMenu from './headerComponents/HeaderMenu'\nimport LoginEthereum from './headerComponents/LoginEthereum'\n\nconst styles = theme => ({\n  grow: {\n    flexGrow: 1,\n  },\n});\n\nconst mapState = state => ({\n  user_address: state.eth.user_address,\n  network: state.global.network,\n  user_address_tron: state.tron.user_address\n})\n\nconst mapDispatch = dispatch => ({\n  setPage: NUMBER => dispatch(globalActions.setPage(NUMBER))\n});\n\nclass Header extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n    };\n  }\n  \n  goToMainPage = () => {\n      this.props.setPage(PAGES.MAIN)\n  }\n  \n  render() {\n    const { \n      classes, \n      user_address,\n      network,\n      user_address_tron\n    } = this.props;\n\n    const short_name = user_address ? user_address.substring(0,8) : \"\"\n    const short_name_tron = user_address_tron ? user_address_tron.base58.substring(0,8) : \"\"\n\n    return (\n        <AppBar position=\"static\">\n          <Toolbar>\n            <HeaderMenu />\n            <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\n                CUSD Faucet \n                <Button \n                  onClick={this.goToMainPage}\n                >\n                  <span role=\"img\" aria-label=\"Sake\">\n                  🍶\n                  </span>\n                </Button> \n                {network == 0 && short_name}\n                {network == 2 && short_name_tron}\n            </Typography>\n            {/* REQUEST USER SIGNATURE */}\n            <LoginEthereum />\n          </Toolbar>\n        </AppBar>\n    );\n  }\n}\n\nHeader.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nexport default connect(mapState, mapDispatch)(withRoot(withStyles(styles)(Header)));\n","/**\n * Return tronweb object (akin to \"Truffle\" for Ethereum) connected to the Shasta testnet\n */\nimport TronWeb from 'tronweb';\nconst HttpProvider = TronWeb.providers.HttpProvider;\nconst NODE_URL = 'https://api.shasta.trongrid.io'\nconst fullNode = new HttpProvider(NODE_URL);\nconst solidityNode = new HttpProvider(NODE_URL);\nconst eventServer = NODE_URL;\n\nconst getDefaultTronWeb = async () => {\n    const tronWeb = new TronWeb(\n        fullNode,\n        solidityNode,\n        eventServer\n    );\n    return tronWeb\n}\n\n\nexport default getDefaultTronWeb","const commonConfig = {\n    // server_url: \"http://localhost:5000/\",\n    server_url: \"https://cusd-faucet-server-ropsten.herokuapp.com/\",\n    infura_public_key: \"c7b70fc4ec0e4ca599e99b360894b699\"\n}\n\nexport default commonConfig","import Web3 from 'web3';\n\n// Config \nimport config from '../config'\n\nconst getDefaultWeb3 = async () => {\n    var WEB_3_NODE = ('wss://ropsten.infura.io/ws/v3/'+config.infura_public_key)\n    let default_web3 = new Web3(new Web3.providers.WebsocketProvider(WEB_3_NODE));\n    let default_network = await default_web3.eth.net.getId()\n    return {\n        web3: default_web3, \n        network: default_network\n    }\n}\n\nexport default getDefaultWeb3","import React, { Component } from 'react';\nimport withRoot from '../../withRoot';\nimport PropTypes from 'prop-types';\n\n// Material-ui\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\nimport InputLabel from '@material-ui/core/InputLabel'\n\n// Redux state\nimport { connect } from \"react-redux\";\nimport { globalActions, NETWORKS } from \"../../store/globalActions\";\nimport { eosActions } from \"../../store/eosActions\";\nimport { tronActions } from \"../../store/tronActions\";\n\n//scatter\nimport ScatterJS from 'scatterjs-core';\nimport ScatterEOS from 'scatterjs-plugin-eosjs2';\nimport getDefaultTronWeb from '../../tron_services/getDefaultTronWeb'\nimport Web3 from 'web3';\nimport getDefaultWeb3 from '../../eth_services/getDefaultWeb3'\n\nconst styles = theme => ({\n  paper: {\n    paddingTop: theme.spacing.unit * 2,\n    paddingBottom: theme.spacing.unit * 2,\n    marginTop: theme.spacing.unit * 2,\n    marginBottom: theme.spacing.unit * 1,\n    marginLeft: theme.spacing.unit * 5,\n    marginRight: theme.spacing.unit * 5,\n  },\n  formControl: {\n    margin: theme.spacing.unit,\n    minWidth: 120,\n  },\n});\n\n// Redux mappings\nconst mapState = state => ({\n  eos_client: state.global.eos_client,\n  network: state.global.network,\n  scatter_state: state.eos.scatter_state,\n  tronWeb: state.global.tronWeb,\n  web3: state.global.web3,\n\n});\n\nconst mapDispatch = dispatch => ({\n  setNetwork: NETWORK => dispatch(globalActions.setNetwork(NETWORK)),\n  setEOS:  client => dispatch(globalActions.setEOS(client)),\n  setEosName: name => dispatch(eosActions.setEosName(name)),\n  setScatterState: string => dispatch(eosActions.setScatterState(string)),\n  setTronAddress: string => dispatch(tronActions.setTronAddress(string)),\n  setTronWeb: tronweb => dispatch(globalActions.setTronWeb(tronweb)),\n  setWeb3: web3 =>\n    dispatch(globalActions.setWeb3(web3)),\n  setWeb3Network: number => dispatch(globalActions.setWeb3Network(number)),\n});\n\n\nclass Networks extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n    };\n  }\n\n  /** Connect App to Scatter for EOS api connection */\n  _checkScatterConnection = async () => {\n    if (this.props.scatter_state) {\n      // Scatter already set\n      return\n    } else {\n      // tell ScatterJS which plugins you are using.\n      ScatterJS.plugins( new ScatterEOS())\n\n      // attempt to connect to Scatter app\n      const APP_NAME=\"CUSD_OASIS\"\n      let connected = await ScatterJS.scatter.connect(APP_NAME)\n      if (connected) {\n            let scatter = ScatterJS.scatter\n            this.props.setScatterState(scatter)\n            // replace window's default ScatterJS object\n            window.ScatterJS = null\n      }\n      return\n    }\n  }\n\n  /** SET UP TronWeb */\n  _checkTronConnection = async () => {\n    // Set tronweb to injected tronweb if possible\n    let installed = window.tronWeb\n    // Detected Tron dapp browser! \n    if (installed) {\n        this.props.setTronWeb(window.tronWeb)\n    } \n    else {\n      // Create default tronweb in case browser cannot inject tronweb\n      let default_tronweb = await getDefaultTronWeb()\n      this.props.setTronWeb(default_tronweb)\n\n      // Non-dapp browsers, inject tronweb on behalf of user\n      window.tronWeb = this.props.tronWeb\n    }\n  }\n\n    /** SET UP Web3 */\n  _checkEthereumConnection = async () => {\n\n    // Set default web3 in case browser cannot inject web3\n    let default_web3 = await getDefaultWeb3()\n    this.props.setWeb3(default_web3.web3)\n    this.props.setWeb3Network(default_web3.network)\n\n    // Now, replace web3 with injected web3 if possible\n    // Modern dapp browsers...\n    if (window.ethereum) {\n        window.web3 = new Web3(window.ethereum);\n        \n        try {\n            // Request account access if needed\n            await window.ethereum.enable()\n            // Store web3 instance in redux store\n            this.props.setWeb3(window.web3)\n            let network = await window.web3.eth.net.getId()\n            this.props.setWeb3Network(network)\n        } catch (error) {\n            // User denied account access... setting fallback web3 object to access web3 \n            console.log('user denied ethereum account access')\n        }\n    }\n    // Legacy dapp browsers...\n    else if (window.web3) {\n        window.web3 = new Web3(window.web3.currentProvider);\n        this.props.setWeb3(window.web3)\n        let network = await window.web3.eth.net.getId()\n        this.props.setWeb3Network(network)\n    }\n    // Non-dapp browsers...\n    else {\n    }\n  }  \n\n  /** CONTINUOUS TIMER BEGINNING AT MOUNT */\n  componentDidMount = async () => {\n    var intervalId = setInterval(this.timer, 1000);\n    // store intervalId in the state so it can be accessed later:\n    this.setState({intervalId: intervalId});\n  }\n\n  // @dev Put anything that you want to continually compute here\n  timer = async () => {\n\n    if (this.props.network == \"1\"){      \n      await this._checkScatterConnection()\n    } else if (this.props.network == \"2\") {\n      await this._checkTronConnection()\n    } else if (this.props.network == \"0\") {\n      await this._checkEthereumConnection()\n    }\n  }\n\n  componentWillUnmount = () => {\n    // use intervalId from the state to clear the interval\n    clearInterval(this.state.intervalId);\n  }\n\n\n\n  handleChange = name => event => {\n    var current = event.target.value;\n    this.props.setNetwork(current);\n    if (current === \"1\"){\n      //EOS\n    } \n    else if (current === \"0\") {\n      //ETH\n    }\n    else if (current === \"2\") {\n      //TRON  \n      }\n      else {\n        throw (Error(\"No network\"))\n      } \n\n  };\n\n  render() {\n\n    const { \n      classes\n    } = this.props;\n\n    return (\n        <div>\n        <Paper className={classes.paper} elevation={3}>\n            <FormControl className={classes.formControl}>\n                <InputLabel htmlFor=\"network-selector\">Network</InputLabel>\n                <Select\n                    native\n                    value={this.state.age}\n                    onChange={this.handleChange('age')}\n                    inputProps={{\n                    name: 'age',\n                    id: 'age-native-simple',\n                    }}\n                >\n                    <option value={NETWORKS.ETH}>ETH (Ropsten)</option>\n                    <option value={NETWORKS.EOS}>EOS (Jungle)</option>\n                    <option value={NETWORKS.TRON}>TRON (Shasta)</option>\n                </Select>\n            </FormControl>\n        </Paper>\n        </div>\n    )\n  }\n}\n\nNetworks.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default connect(mapState, mapDispatch)(withRoot(withStyles(styles)(Networks)));\n","const getNetworkNameById = (networkId) => {\n  let networkName;\n  switch (networkId) {\n    case 1:\n      networkName = \"Mainnet\";\n      break;\n    case 2:\n      networkName = \"Morden\";\n      break;\n    case 3:\n      networkName = \"Ropsten\";\n      break;\n    case 4:\n      networkName = \"Rinkeby\";\n      break;\n    case 42:\n      networkName = \"Kovan\";\n      break;\n    default:\n      networkName = \"Unknown\";\n  }\n  return networkName;\n}\n\nexport default getNetworkNameById\n","import React, { Component } from 'react';\nimport withRoot from '../../withRoot';\nimport PropTypes from 'prop-types';\n\n// Material-ui\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper'\nimport Typography from '@material-ui/core/Typography'\n\n// Redux state\nimport { connect } from \"react-redux\";\n\n// Web3 Services\nimport getNetworkNameById from '../../eth_services/getNetworkNameById'\n\nconst styles = theme => ({\n  paper: {\n    paddingTop: theme.spacing.unit * 2,\n    paddingBottom: theme.spacing.unit * 2,\n    marginTop: theme.spacing.unit * 2,\n    marginBottom: theme.spacing.unit * 1,\n    marginLeft: theme.spacing.unit * 5,\n    marginRight: theme.spacing.unit * 5,\n  }\n});\n\n// Redux mappings\nconst mapState = state => ({\n  eth_address: state.eth.user_address,\n  web3_network: state.global.web3_network,\n  network: state.global.network,\n  eos_name: state.eos.user_name,\n  scatter_state: state.eos.scatter_state,\n  tron_address: state.tron.user_address\n});\n\nconst mapDispatch = dispatch => ({\n});\n\nclass Accounts extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n    };\n  }\n\n  render() {\n\n    const { \n      classes, \n      eth_address, \n      tron_address,\n      web3_network,\n      network,\n      eos_name,\n      scatter_state\n    } = this.props;\n\n    // ETH\n    const user_short = eth_address ? eth_address.substring(0, 8) : \"\" \n    const networkName = (web3_network ? getNetworkNameById(web3_network) : \"\")\n\n    // Tron\n    const user_short_tron = tron_address ? tron_address.base58.substring(0, 8) : \"\"\n    \n    return (\n        <Paper className={classes.paper} elevation={3}>\n            {network == 0 && (\n            <Typography> \n                You are connected to Ethereum ({networkName ? networkName : \"\"}) as: \n                    {eth_address ? (<a\n                    href={\"https://ropsten.etherscan.io/address/\" + eth_address}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    >\n                    {user_short}...\n                    </a>) : (\"\")}\n            </Typography>)}\n            {network == 1 && (\n            <Typography> \n                You are connected to EOS Jungle testnet as: {eos_name ? (<a\n                    href={\"https://jungle.bloks.io/account/\" + eos_name}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    >\n                    {eos_name}\n                    </a>) : (\"\")}\n              </Typography>)}\n            {network == 2 && (\n            <Typography> \n                You are connected to Tron (Shasta) as: \n                    {tron_address ? (<a\n                    href={\"https://shasta.tronscan.org/#/address/\" + tron_address.base58}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    >\n                    {user_short_tron}...\n                    </a>) : (\"\")}\n            </Typography>\n            )}\n        </Paper>\n    )\n  }\n}\n\nAccounts.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withRoot(connect(mapState, mapDispatch)(withStyles(styles)(Accounts)));\n","import React from 'react';\n\nconst EtherscanLogo = () => (\n  <img\n    style={{ height: \"20px\", width: \"auto\" }}\n    alt=\"Etherscan\"\n    src=\"https://db5islsn2p9x4.cloudfront.net/etherscan.png\"\n  />\n);\n\nexport default EtherscanLogo;\n","import React, { Component } from 'react';\nimport withRoot from '../../withRoot';\nimport PropTypes from 'prop-types';\n\n// Material-ui\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button'\nimport Paper from '@material-ui/core/Paper'\nimport Typography from '@material-ui/core/Typography'\n\n// Redux state\nimport { connect } from \"react-redux\";\nimport { ethActions } from \"../../store/ethActions\";\n\n// Custom Components\nimport EtherscanLogo from '../helpers/EtherscanLogo'\n\n// REST API server\nimport axios from 'axios'\nimport config from \"../../config\"\nconst SERVER = config.server_url\nconst MINTER_ENDPOINT = SERVER+\"api/faucet/minter\"\n\nconst styles = theme => ({\n  paper: {\n    paddingTop: theme.spacing.unit * 2,\n    paddingBottom: theme.spacing.unit * 2,\n    marginTop: theme.spacing.unit * 2,\n    marginBottom: theme.spacing.unit * 1,\n    marginLeft: theme.spacing.unit * 5,\n    marginRight: theme.spacing.unit * 5,\n  }\n});\n\n// Redux mappings\nconst mapState = state => ({\n  eth_address: state.eth.user_address,\n  web3: state.global.web3,\n  pending_mints: state.eth.pending_mints,\n  \n  network: state.global.network\n});\n\nconst mapDispatch = dispatch => ({\n  concatPendingMints: newMint => dispatch(ethActions.concatPendingMints(newMint)),\n});\n\nclass MintButton extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      amount_to_mint: \"10.3141\",\n      minting: false,\n    };\n  }\n\n  /** BUTTON CLICK HANDLERS */\n\n  // Mint new CUSD to user\n  handleClick_Mint = async () => {\n    let web3 = this.props.web3\n    if (web3) {\n      let amountToMint = web3.utils.toWei(this.state.amount_to_mint, 'ether')\n  \n      let to = this.props.eth_address\n      if (!web3.utils.isAddress(to)) {\n        console.error('invalid user address: ', to)\n        return\n      }\n\n      let post_data = {\n        amount: amountToMint.toString(),\n        user: to\n      }\n\n      this.setState({\n        minting: true\n      })\n\n      try {\n        // TODO: Each pending mint should have a Number:mint_id, and a status: pending, failed, success\n        let minter_status = await axios.get(\n          MINTER_ENDPOINT\n        )\n        let minter_balance = minter_status.data.minter_balance\n        if (minter_balance <= 0) {\n          alert('Minter does not have enough eth to mint :(')\n          this.setState({\n            minting: false\n          })\n        }\n\n        // API CALL\n        let response\n        try {\n          response = await axios.post(\n            MINTER_ENDPOINT,\n            post_data\n          );\n        } catch (err) {\n          this.setState({\n            minting: false\n          })\n          console.error(\"please be patient in between transactions\") ;\n          return ; \n        }\n\n        let pending_hash = response.data.pending_hash\n        this.props.concatPendingMints(pending_hash)\n        this.setState({\n          minting: false\n        })\n      } catch (err) {\n        this.setState({\n          minting: false\n        })\n      }\n    }\n  }\n\n  /** END BUTTON CLICK HANDLERS */\n\n  render() {\n\n    const { \n      classes, \n      eth_address,\n      pending_mints,\n    } = this.props;\n    \n    return (\n          <Paper className={classes.paper} elevation={3}>\n            {/* MINT BUTTON  */}\n            { !eth_address ?\n              (\n                <Button disabled>Please sign in to get CUSD!</Button>\n              )\n              : (\n                <Button\n                  onClick={this.handleClick_Mint}\n                  disabled={this.state.minting}\n                  variant=\"contained\"\n                  color=\"secondary\"\n                >\n                  Mint me {this.state.amount_to_mint} CUSD\n                </Button>\n              )\n            }\n            \n            {/* MINT TXNS  */}\n            { pending_mints.length > 0 ? (\n            <div>\n              <Typography> \n                Your mint transactions: \n              </Typography>\n              {pending_mints.map((pending_hash, i) => {\n                return (<Typography key={i}> \n                  <EtherscanLogo /> ({i}): \n                  <a\n                    href={\"https://ropsten.etherscan.io/tx/\" + pending_hash}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    {\" track on Etherscan\"}\n                  </a>\n                </Typography>)\n              })}\n            </div> ) : (\"\")}\n          </Paper>\n    );\n  }\n}\n\nMintButton.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withRoot(connect(mapState, mapDispatch)(withStyles(styles)(MintButton)));\n","import React from 'react';\n\nconst BloksLogo = () => (\n  <img\n    style={{ height: \"20px\", width: \"auto\" }}\n    alt=\"Bloks.io\"\n    src=\"https://s3.amazonaws.com/carbon12/eoscafeblock.png\"\n  />\n);\n\nexport default BloksLogo;\n","import React, { Component } from 'react';\nimport withRoot from '../../../withRoot';\nimport PropTypes from 'prop-types';\n\n// Material-ui\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button'\nimport Paper from '@material-ui/core/Paper'\nimport Typography from '@material-ui/core/Typography'\n\n// Redux state\nimport { connect } from \"react-redux\";\nimport { eosActions } from \"../../../store/eosActions\";\n\n// Custom Components\nimport BloksLogo from '../../helpers/BloksLogo'\n\n// REST API server\nimport axios from 'axios'\nimport config from \"../../../config\"\nconst SERVER = config.server_url\nconst MINTER_ENDPOINT = SERVER+\"api/eos/faucet\"\n\nconst styles = theme => ({\n  paper: {\n    paddingTop: theme.spacing.unit * 2,\n    paddingBottom: theme.spacing.unit * 2,\n    marginTop: theme.spacing.unit * 2,\n    marginBottom: theme.spacing.unit * 1,\n    marginLeft: theme.spacing.unit * 5,\n    marginRight: theme.spacing.unit * 5,\n  }\n});\n\n// Redux mappings\nconst mapState = state => ({\n  pending_mints: state.eos.pending_mints,\n  eos_client: state.global.eos_client,\n  eos_name: state.eos.user_name,\n  network: state.global.network\n});\n\nconst mapDispatch = dispatch => ({\n  concatPendingMints: newMint => dispatch(eosActions.concatPendingMints(newMint)),\n});\n\nclass MintButton extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      amount_to_mint: \"10.50\",\n      minting: false,\n    };\n  }\n\n  /** CONTINUOUS TIMER BEGINNING AT MOUNT */\n  componentDidMount = async () => {\n    var intervalId = setInterval(this.timer, 1000);\n    // store intervalId in the state so it can be accessed later:\n    this.setState({intervalId: intervalId});\n  }\n\n  componentWillUnmount = () => {\n    // use intervalId from the state to clear the interval\n    clearInterval(this.state.intervalId);\n  }\n  /** BUTTON CLICK HANDLERS */\n\n  // Mint new CUSD to user\n  handleClick_Mint = async () => {\n    \n    let to = this.props.eos_name\n    if (!to) { return; } // user not signed in\n\t  let post_data = {\n\t    user: to,\n      amount: this.state.amount_to_mint.toString(),\n    }\n    console.log(post_data)\n\n\t  this.setState({\n\t    minting: true\n\t  })\n\n\t  try {\n\t    // TODO: Each pending mint should have a Number:mint_id, and a status: pending, failed, success\n\t    //let minter_status = await axios.get(\n\t    //  MINTER_ENDPOINT\n\t    //)\n\t    \n\n\t    // API CALL\n\t    let response\n\t    try {\n\t      response = await axios.post(\n\t        MINTER_ENDPOINT,\n\t        post_data\n\t      );\n\t    } catch (err) {\n\t      this.setState({\n\t        minting: false\n\t      })\n\t      console.error(\"please be patient in between transactions\") ;\n\t      return ; \n\t    }\n\n\t    let pending_hash = response.data.transaction_id\n\n\t    this.props.concatPendingMints(pending_hash)\n\t    this.setState({\n\t      minting: false\n\t    })\n\t  } catch (err) {\n\t    this.setState({\n\t      minting: false\n\t    })\n\t  }\n\n\n  }\n\n  /** END BUTTON CLICK HANDLERS */\n\n  render() {\n\n    const { \n      classes, \n      pending_mints,\n      eos_name\n    } = this.props;\n    \n    return (\n          <Paper className={classes.paper} elevation={3}>\n            {/* MINT BUTTON  */}\n            { !eos_name ?\n              (\n                <Button disabled>Please sign in to get CUSD!</Button>\n              )\n              : (\n                <Button\n                  onClick={this.handleClick_Mint}\n                  disabled={this.state.minting}\n                  variant=\"contained\"\n                  color=\"secondary\"\n                >\n                  Mint me {this.state.amount_to_mint} CUSD\n                </Button>\n              )\n            }\n            \n            {/* MINT TXNS  */}\n            { pending_mints.length > 0 ? (\n            <div>\n              <Typography> \n                Your mint transactions: \n              </Typography>\n              {pending_mints.map((pending_hash, i) => {\n                return (<Typography key={i}> \n                  <BloksLogo /> ({i}): \n                  <a\n                    href={\"https://jungle.bloks.io/transaction/\" + pending_hash}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    {\" track on bloks.io\"}\n                  </a>\n                </Typography>)\n              })}\n            </div> ) : (\"\")}\n          </Paper>\n    );\n  }\n}\n\nMintButton.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withRoot(connect(mapState, mapDispatch)(withStyles(styles)(MintButton)));\n","import React from 'react';\n\nconst TronLogo = () => (\n  <img\n    style={{ height: \"20px\", width: \"auto\" }}\n    alt=\"Etherscan\"\n    src=\"https://s3.amazonaws.com/carbon12/tron.svg\"\n  />\n);\n\nexport default TronLogo;\n","import React, { Component } from 'react';\nimport withRoot from '../../../withRoot';\nimport PropTypes from 'prop-types';\n\n// Material-ui\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button'\nimport Paper from '@material-ui/core/Paper'\nimport Typography from '@material-ui/core/Typography'\n\n// Redux state\nimport { connect } from \"react-redux\";\nimport { tronActions } from \"../../../store/tronActions\";\n\n// Custom Components\nimport TronLogo from '../../helpers/TronLogo'\n\n// REST API server\nimport axios from 'axios'\nimport config from \"../../../config\"\nconst SERVER = config.server_url\nconst MINTER_ENDPOINT = SERVER+\"api/tron/mint\"\n\nconst styles = theme => ({\n  paper: {\n    paddingTop: theme.spacing.unit * 2,\n    paddingBottom: theme.spacing.unit * 2,\n    marginTop: theme.spacing.unit * 2,\n    marginBottom: theme.spacing.unit * 1,\n    marginLeft: theme.spacing.unit * 5,\n    marginRight: theme.spacing.unit * 5,\n  }\n});\n\n// Redux mappings\nconst mapState = state => ({\n  tron_address: state.tron.user_address,\n  tronWeb: state.global.tronWeb,\n  pending_mints: state.tron.pending_mints,\n});\n\nconst mapDispatch = dispatch => ({\n  concatPendingMints: newMint => dispatch(tronActions.concatPendingMints(newMint)),\n});\n\nclass MintButton extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      amount_to_mint: 10,\n      minting: false,\n    };\n  }\n\n  /** BUTTON CLICK HANDLERS */\n\n  // Mint new CUSD to user\n  handleClick_Mint = async () => {\n    let tronWeb = this.props.tronWeb\n    if (tronWeb) {\n      // Tron contracts only deal with integers, need to be able to convert decimals\n      let amountToMint = (parseFloat(this.state.amount_to_mint)*(10**18)).toString()\n\n      let to = this.props.tron_address.base58\n      if (!tronWeb.isAddress(to)) {\n        console.error('invalid user address: ', to)\n        return\n      }\n\n      this.setState({\n        minting: true\n      })\n\n      try {\n        // Second, request minter to mint new CUSD via POST\n        let post_data = {\n          user_hex: to,\n          amount: amountToMint,\n        }\n        let response = await axios.post(\n          MINTER_ENDPOINT,\n          post_data\n        );\n\n        let pending_hash = response.data.transaction_hash\n        this.props.concatPendingMints(pending_hash)\n        this.setState({\n          minting: false\n        })\n      } catch (err) {\n        console.error('Minting failed, please try again in 5 minutes')\n        this.setState({\n          minting: false\n        })\n      }\n    } else {\n      alert('no tronweb detected')\n    }\n  }\n\n  /** END BUTTON CLICK HANDLERS */\n\n  render() {\n\n    const { \n      classes, \n      tron_address,\n      pending_mints,\n    } = this.props;\n    \n    return (\n          <Paper className={classes.paper} elevation={3}>\n            {/* MINT BUTTON  */}\n            { !tron_address ?\n              (\n                <Button disabled>Please sign in to get CUSD!</Button>\n              )\n              : (\n                <Button\n                  onClick={this.handleClick_Mint}\n                  disabled={this.state.minting}\n                  variant=\"contained\"\n                  color=\"secondary\"\n                >\n                  Mint me {this.state.amount_to_mint} CUSD\n                </Button>\n              )\n            }\n            \n            {/* MINT TXNS  */}\n            { pending_mints.length > 0 ? (\n            <div>\n              <Typography> \n                Your mint transactions: \n              </Typography>\n              {pending_mints.map((pending_hash, i) => {\n                return (<Typography key={i}> \n                  <TronLogo /> ({i}): \n                  <a\n                    href={\"https://shasta.tronscan.org/#/transaction/\" + pending_hash}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    {\" track on Tronscan\"}\n                  </a>\n                </Typography>)\n              })}\n            </div> ) : (\"\")}\n          </Paper>\n    );\n  }\n}\n\nMintButton.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withRoot(connect(mapState, mapDispatch)(withStyles(styles)(MintButton)));\n","// Fetch active CUSD instance\nexport const getCUSD = (web3) => {\n    if (!web3) return;\n    // Contract ABI's\n    const ABI = require(\"../contracts/MetaToken.json\");\n\n    // Contract Ropsten Addresses\n    const ADDRESS = \"0x67450c8908e2701abfa6745be3949ad32acf42d8\";\n\n    var jsonFile = ABI;\n    var abi = jsonFile.abi;\n    var deployedAddress = ADDRESS;\n    const instance = new web3.eth.Contract(abi, deployedAddress);\n    return instance;\n}","import { getCUSD } from './getCUSD'\n\n// Refresh user CUSD balance\nexport const updateUserBalance = async (web3, user) => {\n  try {\n    if (web3 && user) {\n      let cusd = getCUSD(web3)\n      if (web3.utils.isAddress(user)) {\n        let balance = await cusd.methods.balanceOf(user).call()\n        let short_balance = web3.utils.fromWei(balance.toString(), 'ether')\n        return short_balance\n      } else {\n        return -1\n      }\n    } else {\n      return -1\n    }\n\n  } catch (err) {\n    return -1\n  }\n}","import {rpc, CONTRACT_CODE} from './getDefaultEosJS'\n// Refresh user CUSD balance\nexport const updateEosBalance = async (user_name) => {\n  try {\n        const result = await rpc.get_table_rows({\n            \"code\": CONTRACT_CODE,\n            \"scope\": user_name,\n            \"table\": \"accounts\" // accounts table stores balances\n        })\n        \n        let i;\n        for (i = 0; i < result.rows.length; i++){\n        \tif (result.rows[i].balance.split(\" \")[1] === \"CUSD\"){\n        \t\treturn result.rows[i].balance.split(\" \")[0]\n        \t}\n        }\n    } catch (err) {\n        console.log(err)\n        throw(err)\n\n    }\n}","// Fetch active CUSD instance\nexport const getCUSD = async (tronWeb) => {\n    if (!tronWeb) return;\n    // Contract ABI's\n    const ABI = require(\"../contracts/tron/CarbonDollar.json\");\n\n    // Contract Ropsten Addresses\n    const SHASTA_NETWORK_ID = 2\n    const ADDRESS = ABI.networks[SHASTA_NETWORK_ID].address\n\n    try {\n        let contract_base58_address = tronWeb.address.fromHex(ADDRESS) \n        let cusd = await tronWeb.contract().at(contract_base58_address)\n        return cusd\n    } catch (err) {\n        throw err\n    }\n}\n\nexport default getCUSD","import { getCUSD } from './getCUSD'\n\n// Refresh user CUSD balance\n// @dev user should be in Hex encoding NOT base58\nexport const updateTronBalance = async (tronWeb, user) => {\n  try {\n    if (tronWeb && user) {\n      let cusd = await getCUSD(tronWeb)\n      if (tronWeb.isAddress(user)) {\n        let balance = await cusd.balanceOf(user).call()\n        let decimal = parseFloat(balance.toString())\n        let converted = decimal/(10**18)\n        return converted\n      } else {\n        return -1\n      }\n    } else {\n      return -1\n    }\n\n  } catch (err) {\n    return -1\n  }\n}","import React from 'react';\n\nconst CarbonLogo = () => (\n  <img\n    style={{ height: \"15px\", width: \"auto\" }}\n    alt=\"Etherscan\"\n    src=\"https://db5islsn2p9x4.cloudfront.net/carbon-logo.svg\"\n  />\n\n);\n\nexport default CarbonLogo;\n","import React, { Component } from 'react';\nimport withRoot from '../../withRoot';\nimport PropTypes from 'prop-types';\n\n// Material-ui\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper'\nimport Typography from '@material-ui/core/Typography'\n\n// Redux state\nimport { connect } from \"react-redux\";\nimport { ethActions } from \"../../store/ethActions\";\nimport { eosActions } from \"../../store/eosActions\";\nimport { tronActions } from \"../../store/tronActions\";\n\n// WEB3 Services\nimport { updateUserBalance } from '../../eth_services/updateUserBalance'\n// EOS Services\nimport { updateEosBalance } from '../../eos_services/updateEosBalance'\n// Tron Services\nimport { updateTronBalance } from '../../tron_services/updateTronBalance'\n\n// CUSD Currency Logo\nimport CarbonLogo from '../helpers/CarbonLogo'\n\nconst styles = theme => ({\n  paper: {\n    paddingTop: theme.spacing.unit * 2,\n    paddingBottom: theme.spacing.unit * 2,\n    marginTop: theme.spacing.unit * 2,\n    marginBottom: theme.spacing.unit * 1,\n    marginLeft: theme.spacing.unit * 5,\n    marginRight: theme.spacing.unit * 5,\n  }\n});\n\n// Redux mappings\nconst mapState = state => ({\n  eth_address: state.eth.user_address,\n  web3: state.global.web3,\n  balance_cusd: state.eth.balance_cusd,\n  eos_client: state.global.eos_client,\n  eos_name: state.eos.user_name,\n  eos_balance_cusd: state.eos.balance_cusd,\n  network: state.global.network,\n  tron_address: state.tron.user_address,\n  tronWeb: state.global.tronWeb,\n  balance_cusd_tron: state.tron.balance_cusd\n});\n\nconst mapDispatch = dispatch => ({\n  setEthBalance: balance => dispatch(ethActions.setEthBalance(balance)),\n  setEosBalance: balance => dispatch(eosActions.setEosBalance(balance)),\n  setTronBalance: balance => dispatch(tronActions.setTronBalance(balance)),\n});\n\nclass Balances extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n    };\n  }\n\n  // Refresh user CUSD balance\n\n  // On Ethereum:\n  _updateUserBalance = async (user) => {\n    let web3 = this.props.web3\n    if (!web3 || !user) return;\n    let short_balance = await updateUserBalance(web3, user)\n    if (short_balance >= 0 ) {\n        if (short_balance !== this.props.balance_cusd) {\n          this.props.setEthBalance(short_balance)\n        }\n    } else {\n      this.props.setEthBalance(\"N/A\")\n    }\n  }\n\n  // On EOS:\n  _updateEosBalance = async () => {\n      if (this.props.eos_name) { \n        let oldBalance = this.props.eos_balance_cusd\n        let newBalance = await updateEosBalance(this.props.eos_name)\n        if (oldBalance !== newBalance){\n         this.props.setEosBalance(newBalance)\n       }\n      }\n  }\n\n  // On Tron:\n  _updateTronBalance = async (user) => {\n    let tronWeb = this.props.tronWeb\n    if (!tronWeb || !user) return;\n    let short_balance = await updateTronBalance(tronWeb, user)\n    if (short_balance >= 0 ) {\n        if (short_balance !== this.props.balance_cusd_tron) {\n          this.props.setTronBalance(short_balance)\n        }\n    } else {\n      this.props.setTronBalance(\"N/A\")\n    }\n\n  }\n\n  /** CONTINUOUS TIMER BEGINNING AT MOUNT */\n  componentDidMount = async () => {\n    var intervalId = setInterval(this.timer, 5000);\n    // store intervalId in the state so it can be accessed later:\n    this.setState({intervalId: intervalId});\n  }\n\n  // @dev Put anything that you want to continually compute here\n  timer = async () => {\n\n\n    if (this.props.network == 0){\n      // Update user balance\n      await this._updateUserBalance(this.props.eth_address)\n    } else if (this.props.network == 1) {\n      await this._updateEosBalance(this.props.eos_client)\n    } else if (this.props.network == 2) {\n      // @dev Tron Smart contracts deal with Hex addresses, like Solidity\n      await this._updateTronBalance(this.props.tron_address.hex)\n    }\n  }\n\n  componentWillUnmount = () => {\n    // use intervalId from the state to clear the interval\n    clearInterval(this.state.intervalId);\n  }\n  \n  render() {\n\n    const { \n      classes, \n      balance_cusd,\n      eos_balance_cusd,\n      balance_cusd_tron,\n      network\n    } = this.props;\n\n    let balance\n    if (network == 0) {\n      balance = balance_cusd\n    } else if (network == 1) {\n      balance = eos_balance_cusd\n    } else if (network == 2) {\n      balance = balance_cusd_tron\n    }\n\n    return (\n          \n          <Paper className={classes.paper} elevation={3}>\n          {/*h*/}\n            <Typography> \n              Your <CarbonLogo /> balance: {balance}\n            </Typography>\n          \n          </Paper>\n          \n    );\n  }\n}\n\nBalances.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withRoot(connect(mapState, mapDispatch)(withStyles(styles)(Balances)));\n","import React, { Component } from 'react';\nimport Snackbar from '@material-ui/core/Snackbar'\nimport PropTypes from 'prop-types';\nclass SignMessageSnackbar extends Component {\n    render () {\n        const {\n            open\n        } = this.props\n\n        return (\n            <Snackbar\n                anchorOrigin={{\n                vertical: 'bottom',\n                horizontal: 'left',\n                }}\n                open={open}\n                autoHideDuration={3000}\n                ContentProps={{\n                'aria-describedby': 'message-id',\n                }}\n                message={<span id=\"message-id\">Please sign the transaction</span>}\n            />\n        );\n    }\n}\n\nSignMessageSnackbar.propTypes = {\n  open: PropTypes.bool.isRequired,\n};\n\nexport default SignMessageSnackbar;\n","import { getCUSD } from './getCUSD'\nimport { signMessage } from './signMessage'\n\n// Send amount of CUSD from user to another user\nexport const sendCUSD = async function(web3, from, to, amount, eth_wallet) {\n  if (\n    !web3 ||\n    !from ||\n    !to ||\n    !amount ||\n    isNaN(amount) ||\n    amount <= 0 ||\n    !web3.utils.isAddress(from) ||\n    !web3.utils.isAddress(to)\n  ) {\n    console.error(\"invalid parameters passed\");\n    return;\n  }  \n\n  try {\n    let cusd = getCUSD(web3);\n\n    let crafted_transaction = cusd.methods.transfer(to, amount);\n    let nonce = await cusd.methods.replayNonce(from).call();\n    let metatoken = cusd.options.address;\n    let reward = Math.ceil(\n      (await crafted_transaction.estimateGas({\n        from,\n      })) * 2.5\n    );\n\n    // Hash must be in this format: keccak256(abi.encodePacked(address(MetaToken),\"metaTransfer\", _to, _amount, _nonce, _reward));\n    // @devs: cast all signed ints to unsigned ints via web3.utils.toTwosComplement()\n    let metaTx = [\n      metatoken,\n      \"metaTransfer\",\n      to,\n      amount,\n      web3.utils.toTwosComplement(nonce),\n      web3.utils.toTwosComplement(reward)\n    ];\n\n    let hash = web3.utils.soliditySha3(...metaTx);\n    let sig = await signMessage(web3, hash, from, eth_wallet);\n\n    var post_data = {\n      type: 'transfer',\n      transferRecipient: to,\n      amount,\n      sig,\n      signerNonce: nonce,\n      reward,\n    };\n\n    return post_data\n\n  } catch (err) {\n    throw err;\n  }\n};","import React, { Component } from 'react';\nimport withRoot from '../../withRoot';\nimport PropTypes from 'prop-types';\n\n// Material-ui\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button'\nimport Paper from '@material-ui/core/Paper'\nimport Typography from '@material-ui/core/Typography'\nimport TextField from '@material-ui/core/TextField'\n\n// Redux state\nimport { connect } from \"react-redux\";\nimport { ethActions } from \"../../store/ethActions\";\n\n// Custom Components\nimport EtherscanLogo from '../helpers/EtherscanLogo'\nimport SignMessageSnackbar from '../helpers/SignMessageSnackbar'\n\n// WEB3 Services\nimport { sendCUSD } from '../../eth_services/sendCUSD'\n\n// REST API server\nimport axios from 'axios'\nimport config from \"../../config\"\nconst SERVER = config.server_url\nconst RELAYER_ENDPOINT = SERVER+\"api/faucet/relayer\"\n\nconst styles = theme => ({\n  paper: {\n    paddingTop: theme.spacing.unit * 2,\n    paddingBottom: theme.spacing.unit * 2,\n    marginTop: theme.spacing.unit * 2,\n    marginBottom: theme.spacing.unit * 1,\n    marginLeft: theme.spacing.unit * 5,\n    marginRight: theme.spacing.unit * 5,\n  },\n  textField: {\n    marginLeft: theme.spacing.unit,\n    marginRight: theme.spacing.unit,\n    width: 200,\n  }\n});\n\n// Redux mappings\nconst mapState = state => ({\n  eth_address: state.eth.user_address,\n  eth_wallet: state.eth.user_wallet,\n  web3: state.global.web3,\n  pending_transfers: state.eth.pending_transfers,\n});\n\nconst mapDispatch = dispatch => ({\n  concatPendingTransfers: newTransfer => dispatch(ethActions.concatPendingTransfers(newTransfer)),\n});\n\nclass TransferButton extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      transferring: false,\n      amount_to_transfer: '',\n      transfer_to: '',\n    };\n  }\n  \n  /** BUTTON CLICK HANDLERS */\n\n  // Transfer CUSD to another user\n  handleClick_Transfer = async () => {\n    let web3 = this.props.web3\n    if (web3) {\n      let amountToTransfer = web3.utils.toWei(this.state.amount_to_transfer, 'ether')\n  \n      let from = this.props.eth_address\n      let to = this.state.transfer_to\n      if (!web3.utils.isAddress(to)) {\n        console.log('invalid user address: (to) ', to)\n        return\n      }\n      if (!web3.utils.isAddress(from)) {\n        console.log('invalid user address: (from) ', from)\n        return\n      }\n\n      this.setState({\n        transferring: true\n      })\n\n      try {\n        let relayer_status = await axios.get(\n          RELAYER_ENDPOINT\n        )\n        let relayer_balance = relayer_status.data.balance_relayer\n        if (relayer_balance <= 0) {\n          alert('Relayer does not have enough eth to forward metatransfer :(')\n          this.setState({\n            transferring: false\n          })\n        }\n\n        let post_data = await sendCUSD(web3, from, to, amountToTransfer, this.props.eth_wallet)\n        \n        let response\n        try {\n          response = await axios.post(\n            RELAYER_ENDPOINT,\n            post_data\n          );\n        } catch (err) {\n          this.setState({\n            transferring: false\n          })\n          console.error(\"please be patient in between transactions\") ;\n          return ; \n        }\n\n        let pending_hash = response.data.hash\n        this.props.concatPendingTransfers(pending_hash)\n        this.setState({\n          transferring: false\n        })\n      } catch (err) {\n        this.setState({\n          transferring: false\n        })\n      }\n    }\n  }\n\n  /** END BUTTON CLICK HANDLERS */\n\n\n  handleChange = name => event => {\n    this.setState({\n      [name]: event.target.value,\n    });\n  };\n\n  render() {\n\n    const { \n      classes, \n      eth_address,\n      pending_transfers\n    } = this.props;\n    const {\n      transferring,\n      transfer_to,\n      amount_to_transfer\n    } = this.state;\n\n    return (\n        <Paper className={classes.paper} elevation={3}>\n          {/* TRANSFER CUSD  */}\n              { !eth_address ?\n              (\n              <Button disabled>Please sign in to send CUSD!</Button>\n              )\n              : (\n              <div>\n              <form>\n                  <TextField\n                  id=\"transfer-to\"\n                  label=\"Transfer To\"\n                  className={classes.textField}\n                  value={transfer_to}\n                  onChange={this.handleChange('transfer_to')}\n                  margin=\"normal\"\n                  />\n                  <TextField\n                  id=\"transfer-amount\"\n                  label=\"Amount\"\n                  type=\"number\"\n                  className={classes.textField}\n                  value={amount_to_transfer}\n                  onChange={this.handleChange('amount_to_transfer')}\n                  margin=\"normal\"\n                  />\n              </form>\n              <Button\n                  onClick={this.handleClick_Transfer}\n                  disabled={\n                  transferring ||\n                  !transfer_to ||\n                  isNaN(amount_to_transfer) ||\n                  amount_to_transfer <= 0\n                  }\n                  variant=\"contained\"\n                  color=\"secondary\"\n              >\n                  Transfer {amount_to_transfer ? amount_to_transfer : \"\"} CUSD\n              </Button>\n              </div>\n              )\n              }\n          {/* TRANSFER TXNS  */}\n          { pending_transfers.length > 0 ? (\n          <div>\n              <Typography> \n              Your transfer transactions: \n              </Typography>\n              {pending_transfers.map((pending_hash, i) => {\n              return (<Typography key={i}> \n                  <EtherscanLogo /> ({i}): \n                  <a\n                  href={\"https://ropsten.etherscan.io/tx/\" + pending_hash}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  >\n                  {\" track on Etherscan\"}\n                  </a>\n              </Typography>)\n              })}\n          </div> ) : (\"\")}\n          {/* SNACKBAR ALERTS */}\n          <SignMessageSnackbar open={transferring} />\n        </Paper>\n    );\n  }\n}\n\nTransferButton.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withRoot(connect(mapState, mapDispatch)(withStyles(styles)(TransferButton)));\n","import React, { Component } from 'react';\nimport withRoot from '../../../withRoot';\nimport PropTypes from 'prop-types';\n\n// Material-ui\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button'\nimport Paper from '@material-ui/core/Paper'\nimport Typography from '@material-ui/core/Typography'\nimport TextField from '@material-ui/core/TextField'\n\n// Redux state\nimport { connect } from \"react-redux\";\nimport { tronActions } from \"../../../store/tronActions\";\n\n// Tron services\nimport getCUSD from '../../../tron_services/getCUSD';\n\n// Custom Components\nimport TronLogo from '../../helpers/TronLogo'\nimport SignMessageSnackbar from '../../helpers/SignMessageSnackbar'\n\nconst styles = theme => ({\n  paper: {\n    paddingTop: theme.spacing.unit * 2,\n    paddingBottom: theme.spacing.unit * 2,\n    marginTop: theme.spacing.unit * 2,\n    marginBottom: theme.spacing.unit * 1,\n    marginLeft: theme.spacing.unit * 5,\n    marginRight: theme.spacing.unit * 5,\n  },\n  textField: {\n    marginLeft: theme.spacing.unit,\n    marginRight: theme.spacing.unit,\n    width: 200,\n  }\n});\n\n// Redux mappings\nconst mapState = state => ({\n  tron_address: state.tron.user_address,\n  tronWeb: state.global.tronWeb,\n  pending_transfers: state.tron.pending_transfers,\n});\n\nconst mapDispatch = dispatch => ({\n  concatPendingTransfers: newTransfer => dispatch(tronActions.concatPendingTransfers(newTransfer)),\n});\n\nclass TransferButton extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      transferring: false,\n      amount_to_transfer: '',\n      transfer_to: '',\n    };\n  }\n  \n  /** BUTTON CLICK HANDLERS */\n\n  // Transfer CUSD to another user\n  handleClick_Transfer = async () => {\n    let tronWeb = this.props.tronWeb\n    if (tronWeb) {\n        let amountToTransfer = (parseFloat(this.state.amount_to_transfer)*(10**18)).toString()\n        let to = this.state.transfer_to\n        let to_base58 = tronWeb.address.fromHex(to)\n        let verified = tronWeb.isAddress(to) && tronWeb.isAddress(to_base58)\n\n        if (!verified) {\n            console.log('invalid user address: (to) ', to)\n            return\n        }\n        this.setState({\n            transferring: true\n        })\n        try {\n            let cusd = await getCUSD(tronWeb)\n            let pending_hash = await cusd.transfer(to, amountToTransfer).send()\n            this.props.concatPendingTransfers(pending_hash.toString()) // @dev always .toString() tron smart contract return values\n            this.setState({\n                transferring: false\n            })\n        } catch (err) {\n            this.setState({\n                transferring: false\n            })\n        }\n    }\n  }\n\n  /** END BUTTON CLICK HANDLERS */\n\n\n  handleChange = name => event => {\n    this.setState({\n      [name]: event.target.value,\n    });\n  };\n\n  render() {\n\n    const { \n      classes, \n      tron_address,\n      pending_transfers\n    } = this.props;\n    const {\n      transferring,\n      transfer_to,\n      amount_to_transfer\n    } = this.state;\n\n    return (\n        <Paper className={classes.paper} elevation={3}>\n          {/* TRANSFER CUSD  */}\n              { !tron_address ?\n              (\n              <Button disabled>Please sign in to send CUSD!</Button>\n              )\n              : (\n              <div>\n              <form>\n                  <TextField\n                  id=\"transfer-to\"\n                  label=\"Transfer To\"\n                  className={classes.textField}\n                  value={transfer_to}\n                  onChange={this.handleChange('transfer_to')}\n                  margin=\"normal\"\n                  />\n                  <TextField\n                  id=\"transfer-amount\"\n                  label=\"Amount\"\n                  type=\"number\"\n                  className={classes.textField}\n                  value={amount_to_transfer}\n                  onChange={this.handleChange('amount_to_transfer')}\n                  margin=\"normal\"\n                  />\n              </form>\n              <Button\n                  onClick={this.handleClick_Transfer}\n                  disabled={\n                  transferring ||\n                  !transfer_to ||\n                  isNaN(amount_to_transfer) ||\n                  amount_to_transfer <= 0\n                  }\n                  variant=\"contained\"\n                  color=\"secondary\"\n              >\n                  Transfer {amount_to_transfer ? amount_to_transfer : \"\"} CUSD\n              </Button>\n              </div>\n              )\n              }\n          {/* TRANSFER TXNS  */}\n          { pending_transfers.length > 0 ? (\n          <div>\n              <Typography> \n              Your transfer transactions: \n              </Typography>\n              {pending_transfers.map((pending_hash, i) => {\n              return (<Typography key={i}> \n                  <TronLogo /> ({i}): \n                  <a\n                  href={\"https://shasta.tronscan.org/#/transaction/\" + pending_hash}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  >\n                  {\" track on Tronscan\"}\n                  </a>\n              </Typography>)\n              })}\n          </div> ) : (\"\")}\n          {/* SNACKBAR ALERTS */}\n          <SignMessageSnackbar open={transferring} />\n        </Paper>\n    );\n  }\n}\n\nTransferButton.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withRoot(connect(mapState, mapDispatch)(withStyles(styles)(TransferButton)));\n","import { getCUSD } from './getCUSD'\nimport { signMessage } from './signMessage'\n\nconst WT0_ADDRESS = \"0xcd36463470c4b92700b4d5fbe270e680d9d48968\";\n\n// Burn amount of CUSD from user \nexport const burnCUSD = async function(web3, from, amount, eth_wallet) {\n  if (\n    !web3 ||\n    !from ||\n    !amount ||\n    isNaN(amount) ||\n    amount <= 0 ||\n    !web3.utils.isAddress(from) \n  ) {\n    console.error(\"invalid parameters passed\");\n    return;\n  }\n\n  try {\n    let cusd = getCUSD(web3);\n    let stablecoin = WT0_ADDRESS\n    let crafted_transaction = cusd.methods.burnCarbonDollar(stablecoin, amount);\n    let nonce = await cusd.methods.replayNonce(from).call();\n    let metatoken = cusd.options.address;\n    let reward = Math.ceil(\n      (await crafted_transaction.estimateGas({\n        from,\n      })) * 2.5\n    );\n\n    // Hash must be in this format: keccak256(abi.encodePacked(address(MetaToken),\"metaTransfer\", _to, _amount, _nonce, _reward));\n    // @devs: cast all signed ints to unsigned ints via web3.utils.toTwosComplement()\n    let metaTx = [\n      metatoken,\n      \"metaBurnCarbonDollar\",\n      stablecoin,\n      amount,\n      web3.utils.toTwosComplement(nonce),\n      web3.utils.toTwosComplement(reward)\n    ];\n\n    let hash = web3.utils.soliditySha3(...metaTx);\n    let sig = await signMessage(web3, hash, from, eth_wallet);\n\n    var post_data = {\n      type: 'burn',\n      stablecoin,\n      amount,\n      sig,\n      signerNonce: nonce,\n      reward,\n    };\n\n    return post_data\n\n  } catch (err) {\n    throw err;\n  }\n};","import React, { Component } from 'react';\nimport withRoot from '../../withRoot';\nimport PropTypes from 'prop-types';\n\n// Material-ui\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button'\nimport Paper from '@material-ui/core/Paper'\nimport Typography from '@material-ui/core/Typography'\nimport TextField from '@material-ui/core/TextField'\n\n// Redux state\nimport { connect } from \"react-redux\";\nimport { ethActions } from \"../../store/ethActions\";\n\n// Custom Components\nimport EtherscanLogo from '../helpers/EtherscanLogo'\nimport SignMessageSnackbar from '../helpers/SignMessageSnackbar'\n\n// WEB3 Services\nimport { burnCUSD } from '../../eth_services/burnCUSD'\n\n// REST API server\nimport axios from 'axios'\nimport config from '../../config'\nconst SERVER = config.server_url\nconst RELAYER_ENDPOINT = SERVER+\"api/faucet/relayer\"\n\nconst styles = theme => ({\n  paper: {\n    paddingTop: theme.spacing.unit * 2,\n    paddingBottom: theme.spacing.unit * 2,\n    marginTop: theme.spacing.unit * 2,\n    marginBottom: theme.spacing.unit * 1,\n    marginLeft: theme.spacing.unit * 5,\n    marginRight: theme.spacing.unit * 5,\n  },\n  textField: {\n    marginLeft: theme.spacing.unit,\n    marginRight: theme.spacing.unit,\n    width: 200,\n  },\n});\n\n// Redux mappings\nconst mapState = state => ({\n  eth_address: state.eth.user_address,\n  eth_wallet: state.eth.user_wallet,\n  web3: state.global.web3,\n  pending_burns: state.eth.pending_burns\n});\n\nconst mapDispatch = dispatch => ({\n  concatPendingBurns: newBurn => dispatch(ethActions.concatPendingBurns(newBurn)),\n});\n\nclass BurnButton extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      burning: false,\n      amount_to_burn: ''\n    };\n  }\n  /** BUTTON CLICK HANDLERS */\n\n  // Redeem CUSD by burning\n  handleClick_Burn = async () => {\n    let web3 = this.props.web3\n    if (web3) {\n      let amountToBurn = web3.utils.toWei(this.state.amount_to_burn, 'ether')\n  \n      let from = this.props.eth_address\n      if (!web3.utils.isAddress(from)) {\n        console.log('invalid user address: (from) ', from)\n        return\n      }\n\n      this.setState({\n        burning: true\n      })\n\n      try {\n        // TODO: Each pending burn should have a Number:burn_id, and a status: pending, failed, success\n        let relayer_status = await axios.get(\n          RELAYER_ENDPOINT\n        )\n        let relayer_balance = relayer_status.data.balance_relayer\n        if (relayer_balance <= 0) {\n          alert('Relayer does not have enough eth to forward metatransfer :(')\n          this.setState({\n            burning: false\n          })\n        }\n\n        let post_data = await burnCUSD(web3, from, amountToBurn, this.props.eth_wallet)\n\n        let response \n        try {\n          response = await axios.post(\n            RELAYER_ENDPOINT,\n            post_data\n          );\n        } catch (err) {\n          this.setState({\n            burning: false\n          })\n          console.error(\"please be patient in between transactions\") ;\n          return ; \n        }\n        \n        let pending_hash = response.data.hash\n        this.props.concatPendingBurns(pending_hash)\n        this.setState({\n          burning: false\n        })\n\n      } catch (err) {\n        this.setState({\n          burning: false\n        })\n      }\n    }\n  }\n\n  /** END BUTTON CLICK HANDLERS */\n\n\n  handleChange = name => event => {\n    this.setState({\n      [name]: event.target.value,\n    });\n  };\n\n  render() {\n\n    const { \n      classes, \n      eth_address,\n      pending_burns\n    } = this.props;\n    const {\n      burning,\n      amount_to_burn\n    } = this.state\n\n    return (\n          <Paper className={classes.paper} elevation={3}>\n            {/* BURN CUSD  */}\n              { !eth_address ?\n              (\n                <Button disabled>Please sign in to redeem CUSD!</Button>\n              )\n              : (\n                <div>\n                <form>\n                  <TextField\n                    id=\"burn-amount\"\n                    label=\"Amount\"\n                    type=\"number\"\n                    className={classes.textField}\n                    value={amount_to_burn}\n                    onChange={this.handleChange('amount_to_burn')}\n                    margin=\"normal\"\n                  />\n                </form>\n                <Button\n                  onClick={this.handleClick_Burn}\n                  disabled={\n                    burning ||\n                    isNaN(amount_to_burn) ||\n                    amount_to_burn <= 0\n                  }\n                  variant=\"contained\"\n                  color=\"secondary\"\n                >\n                  Redeem {amount_to_burn ? amount_to_burn : \"\"} CUSD\n                </Button>\n                </div>\n              )\n              }\n            {/* BURN TXNS  */}\n            { pending_burns.length > 0 ? (\n            <div>\n              <Typography> \n                Your burn transactions: \n              </Typography>\n              {pending_burns.map((pending_hash, i) => {\n                return (<Typography key={i}> \n                  <EtherscanLogo /> ({i}): \n                  <a\n                    href={\"https://ropsten.etherscan.io/tx/\" + pending_hash}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    {\" track on Etherscan\"}\n                  </a>\n                </Typography>)\n              })}\n            </div> ) : (\"\")}\n            {/* SNACKBAR ALERTS */}\n            <SignMessageSnackbar open={burning} />\n          </Paper>\n    );\n  }\n}\n\nBurnButton.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withRoot(connect(mapState, mapDispatch)(withStyles(styles)(BurnButton)));\n","import React, { Component } from 'react';\nimport withRoot from '../../../withRoot';\nimport PropTypes from 'prop-types';\n\n// Material-ui\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button'\nimport Paper from '@material-ui/core/Paper'\nimport Typography from '@material-ui/core/Typography'\nimport TextField from '@material-ui/core/TextField'\n\n// Redux state\nimport { connect } from \"react-redux\";\nimport { eosActions } from \"../../../store/eosActions\";\n\n// EOS services\nimport { CONTRACT_CODE, CURRENCY_PRECISION, transactionOptions } from '../../../eos_services/getDefaultEosJS'\n\n// Custom Components\nimport BloksLogo from '../../helpers/BloksLogo'\nimport SignMessageSnackbar from '../../helpers/SignMessageSnackbar'\n\nconst styles = theme => ({\n  paper: {\n    paddingTop: theme.spacing.unit * 2,\n    paddingBottom: theme.spacing.unit * 2,\n    marginTop: theme.spacing.unit * 2,\n    marginBottom: theme.spacing.unit * 1,\n    marginLeft: theme.spacing.unit * 5,\n    marginRight: theme.spacing.unit * 5,\n  },\n  textField: {\n    marginLeft: theme.spacing.unit,\n    marginRight: theme.spacing.unit,\n    width: 200,\n  },\n});\n\n// Redux mappings\nconst mapState = state => ({\n  eos_name: state.eos.user_name,\n  eos_api: state.global.eos_client,\n  pending_burns: state.eos.pending_burns\n});\n\nconst mapDispatch = dispatch => ({\n  concatPendingBurns: newBurn => dispatch(eosActions.concatPendingBurns(newBurn)),\n});\n\nclass BurnButton extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      burning: false,\n      amount_to_burn: ''\n    };\n  }\n  /** BUTTON CLICK HANDLERS */\n\n  // Redeem CUSD by burning\n  handleClick_Burn = async () => {\n    let amount = parseFloat(this.state.amount_to_burn)\n    if (this.props.eos_api) {\n      this.setState({\n          burning: true\n      })\n      try {\n        let resultWithConfig = await this.props.eos_api.transact({\n          actions: [\n            {\n              account: CONTRACT_CODE,\n              name: \"burn\",\n              authorization: [\n                {\n                  actor: this.props.eos_name,\n                  permission: \"active\"\n                }\n              ],\n              data: {\n                from: this.props.eos_name,\n                quantity: amount.toFixed(CURRENCY_PRECISION) + \" CUSD\",\n                memo: \"Carbon Jungle Faucet: burning \" + amount.toFixed(CURRENCY_PRECISION) + \" CUSD\"\n              }\n            }\n          ]\n        }, transactionOptions)\n        this.props.concatPendingBurns(resultWithConfig.transaction_id)\n        this.setState({\n            burning: false\n        })\n      } catch (err) {\n        this.setState({\n          burning: false\n        })\n      }\n    }\n  }\n\n  /** END BUTTON CLICK HANDLERS */\n\n\n  handleChange = name => event => {\n    this.setState({\n      [name]: event.target.value,\n    });\n  };\n\n  render() {\n\n    const { \n      classes, \n      eos_name,\n      pending_burns\n    } = this.props;\n    const {\n      burning,\n      amount_to_burn\n    } = this.state\n\n    return (\n          <Paper className={classes.paper} elevation={3}>\n            {/* BURN CUSD  */}\n              { !eos_name ?\n              (\n                <Button disabled>Please sign in to redeem CUSD!</Button>\n              )\n              : (\n                <div>\n                <form>\n                  <TextField\n                    id=\"burn-amount\"\n                    label=\"Amount\"\n                    type=\"number\"\n                    className={classes.textField}\n                    value={amount_to_burn}\n                    onChange={this.handleChange('amount_to_burn')}\n                    margin=\"normal\"\n                  />\n                </form>\n                <Button\n                  onClick={this.handleClick_Burn}\n                  disabled={\n                    burning ||\n                    isNaN(amount_to_burn) ||\n                    amount_to_burn <= 0\n                  }\n                  variant=\"contained\"\n                  color=\"secondary\"\n                >\n                  Redeem {amount_to_burn ? amount_to_burn : \"\"} CUSD\n                </Button>\n                </div>\n              )\n              }\n            {/* BURN TXNS  */}\n            { pending_burns.length > 0 ? (\n            <div>\n              <Typography> \n                Your burn transactions: \n              </Typography>\n              {pending_burns.map((pending_hash, i) => {\n                return (<Typography key={i}> \n                  <BloksLogo /> ({i}): \n                  <a\n                    href={\"https://jungle.bloks.io/transaction/\" + pending_hash}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    {\" track on Bloks.io\"}\n                  </a>\n                </Typography>)\n              })}\n            </div> ) : (\"\")}\n            {/* SNACKBAR ALERTS */}\n            <SignMessageSnackbar open={burning} />\n          </Paper>\n    );\n  }\n}\n\nBurnButton.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withRoot(connect(mapState, mapDispatch)(withStyles(styles)(BurnButton)));\n","import React, { Component } from 'react';\nimport withRoot from '../../../withRoot';\nimport PropTypes from 'prop-types';\n\n// Material-ui\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button'\nimport Paper from '@material-ui/core/Paper'\nimport Typography from '@material-ui/core/Typography'\nimport TextField from '@material-ui/core/TextField'\n\n// Redux state\nimport { connect } from \"react-redux\";\nimport { eosActions } from \"../../../store/eosActions\";\n\n// Eos services\nimport { CONTRACT_CODE, CURRENCY_PRECISION, transactionOptions } from '../../../eos_services/getDefaultEosJS'\n\n// Custom Components\nimport BloksLogo from '../../helpers/BloksLogo'\nimport SignMessageSnackbar from '../../helpers/SignMessageSnackbar'\n\nconst styles = theme => ({\n  paper: {\n    paddingTop: theme.spacing.unit * 2,\n    paddingBottom: theme.spacing.unit * 2,\n    marginTop: theme.spacing.unit * 2,\n    marginBottom: theme.spacing.unit * 1,\n    marginLeft: theme.spacing.unit * 5,\n    marginRight: theme.spacing.unit * 5,\n  },\n  textField: {\n    marginLeft: theme.spacing.unit,\n    marginRight: theme.spacing.unit,\n    width: 200,\n  }\n});\n\n// Redux mappings\nconst mapState = state => ({\n  eos_name: state.eos.user_name,\n  eos_api: state.global.eos_client,\n  pending_transfers: state.eos.pending_transfers,\n});\n\nconst mapDispatch = dispatch => ({\n  concatPendingTransfers: newTransfer => dispatch(eosActions.concatPendingTransfers(newTransfer)),\n});\n\nclass TransferButton extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      transferring: false,\n      amount_to_transfer: '',\n      transfer_to: '',\n    };\n  }\n  \n  /** BUTTON CLICK HANDLERS */\n\n  // Transfer CUSD to another user\n  handleClick_Transfer = async () => {\n    let amount = parseFloat(this.state.amount_to_transfer)\n    if (this.props.eos_api) {\n      this.setState({\n          transferring: true\n      })\n      try {\n        let resultWithConfig = await this.props.eos_api.transact({\n          actions: [\n            {\n              account: CONTRACT_CODE,\n              name: \"transfer\",\n              authorization: [\n                {\n                  actor: this.props.eos_name,\n                  permission: \"active\"\n                }\n              ],\n              data: {\n                from: this.props.eos_name,\n                to: this.state.transfer_to,\n                quantity: amount.toFixed(CURRENCY_PRECISION) + \" CUSD\",\n                memo: \"Carbon Jungle Faucet: transferring \" + amount.toFixed(CURRENCY_PRECISION) + \" CUSD\"\n              }\n            }\n          ]\n        }, transactionOptions)\n        this.props.concatPendingTransfers(resultWithConfig.transaction_id)\n        this.setState({\n            transferring: false\n        })\n      } catch (err) {\n        this.setState({\n            transferring: false\n        })\n      }\n    }\n  }\n\n  /** END BUTTON CLICK HANDLERS */\n\n\n  handleChange = name => event => {\n    this.setState({\n      [name]: event.target.value,\n    });\n  };\n\n  render() {\n\n    const { \n      classes, \n      eos_name,\n      pending_transfers\n    } = this.props;\n    const {\n      transferring,\n      transfer_to,\n      amount_to_transfer\n    } = this.state;\n\n    return (\n        <Paper className={classes.paper} elevation={3}>\n          {/* TRANSFER CUSD  */}\n              { !eos_name ?\n              (\n              <Button disabled>Please sign in to send CUSD!</Button>\n              )\n              : (\n              <div>\n              <form>\n                  <TextField\n                  id=\"transfer-to\"\n                  label=\"Transfer To\"\n                  className={classes.textField}\n                  value={transfer_to}\n                  onChange={this.handleChange('transfer_to')}\n                  margin=\"normal\"\n                  />\n                  <TextField\n                  id=\"transfer-amount\"\n                  label=\"Amount\"\n                  type=\"number\"\n                  className={classes.textField}\n                  value={amount_to_transfer}\n                  onChange={this.handleChange('amount_to_transfer')}\n                  margin=\"normal\"\n                  />\n              </form>\n              <Button\n                  onClick={this.handleClick_Transfer}\n                  disabled={\n                  transferring ||\n                  !transfer_to ||\n                  isNaN(amount_to_transfer) ||\n                  amount_to_transfer <= 0\n                  }\n                  variant=\"contained\"\n                  color=\"secondary\"\n              >\n                  Transfer {amount_to_transfer ? amount_to_transfer : \"\"} CUSD\n              </Button>\n              </div>\n              )\n              }\n          {/* TRANSFER TXNS  */}\n          { pending_transfers.length > 0 ? (\n          <div>\n              <Typography> \n              Your transfer transactions: \n              </Typography>\n              {pending_transfers.map((pending_hash, i) => {\n              return (<Typography key={i}> \n                  <BloksLogo /> ({i}): \n                  <a\n                    href={\"https://jungle.bloks.io/transaction/\" + pending_hash}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                  {\" track on Bloks.io\"}\n                  </a>\n              </Typography>)\n              })}\n          </div> ) : (\"\")}\n          {/* SNACKBAR ALERTS */}\n          <SignMessageSnackbar open={transferring} />\n        </Paper>\n    );\n  }\n}\n\nTransferButton.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withRoot(connect(mapState, mapDispatch)(withStyles(styles)(TransferButton)));\n","import React, { Component } from 'react';\nimport withRoot from '../../../withRoot';\nimport PropTypes from 'prop-types';\n\n// Material-ui\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button'\nimport Paper from '@material-ui/core/Paper'\nimport Typography from '@material-ui/core/Typography'\nimport TextField from '@material-ui/core/TextField'\n\n// Redux state\nimport { connect } from \"react-redux\";\nimport { tronActions } from \"../../../store/tronActions\";\n\n// Tron services\nimport getCUSD from '../../../tron_services/getCUSD';\n\n// Custom Components\nimport TronLogo from '../../helpers/TronLogo'\nimport SignMessageSnackbar from '../../helpers/SignMessageSnackbar'\n\nconst styles = theme => ({\n  paper: {\n    paddingTop: theme.spacing.unit * 2,\n    paddingBottom: theme.spacing.unit * 2,\n    marginTop: theme.spacing.unit * 2,\n    marginBottom: theme.spacing.unit * 1,\n    marginLeft: theme.spacing.unit * 5,\n    marginRight: theme.spacing.unit * 5,\n  },\n  textField: {\n    marginLeft: theme.spacing.unit,\n    marginRight: theme.spacing.unit,\n    width: 200,\n  },\n});\n\n// Redux mappings\nconst mapState = state => ({\n  tron_address: state.tron.user_address,\n  tronWeb: state.global.tronWeb,\n  pending_burns: state.tron.pending_burns\n});\n\nconst mapDispatch = dispatch => ({\n  concatPendingBurns: newBurn => dispatch(tronActions.concatPendingBurns(newBurn)),\n});\n\nclass BurnButton extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      burning: false,\n      amount_to_burn: ''\n    };\n  }\n  /** BUTTON CLICK HANDLERS */\n\n  // Redeem CUSD by burning\n  handleClick_Burn = async () => {\n    let tronWeb = this.props.tronWeb\n    if (tronWeb) {\n        let amountToBurn = (parseFloat(this.state.amount_to_burn)*(10**18)).toString()\n        this.setState({\n            burning: true\n        })\n        try {\n            let cusd = await getCUSD(tronWeb)\n            let pending_hash = await cusd.burn(amountToBurn).send()\n            this.props.concatPendingBurns(pending_hash.toString()) // @dev always .toString() tron smart contract return values\n            this.setState({\n                burning: false\n            })\n        } catch (err) {\n            this.setState({\n                burning: false\n            })\n        }\n    }\n  }\n\n  /** END BUTTON CLICK HANDLERS */\n\n\n  handleChange = name => event => {\n    this.setState({\n      [name]: event.target.value,\n    });\n  };\n\n  render() {\n\n    const { \n      classes, \n      tron_address,\n      pending_burns\n    } = this.props;\n    const {\n      burning,\n      amount_to_burn\n    } = this.state\n\n    return (\n          <Paper className={classes.paper} elevation={3}>\n            {/* BURN CUSD  */}\n              { !tron_address ?\n              (\n                <Button disabled>Please sign in to redeem CUSD!</Button>\n              )\n              : (\n                <div>\n                <form>\n                  <TextField\n                    id=\"burn-amount\"\n                    label=\"Amount\"\n                    type=\"number\"\n                    className={classes.textField}\n                    value={amount_to_burn}\n                    onChange={this.handleChange('amount_to_burn')}\n                    margin=\"normal\"\n                  />\n                </form>\n                <Button\n                  onClick={this.handleClick_Burn}\n                  disabled={\n                    burning ||\n                    isNaN(amount_to_burn) ||\n                    amount_to_burn <= 0\n                  }\n                  variant=\"contained\"\n                  color=\"secondary\"\n                >\n                  Redeem {amount_to_burn ? amount_to_burn : \"\"} CUSD\n                </Button>\n                </div>\n              )\n              }\n            {/* BURN TXNS  */}\n            { pending_burns.length > 0 ? (\n            <div>\n              <Typography> \n                Your burn transactions: \n              </Typography>\n              {pending_burns.map((pending_hash, i) => {\n                return (<Typography key={i}> \n                  <TronLogo /> ({i}): \n                  <a\n                    href={\"https://shasta.tronscan.org/#/transaction/\" + pending_hash}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    {\" track on Tronscan\"}\n                  </a>\n                </Typography>)\n              })}\n            </div> ) : (\"\")}\n            {/* SNACKBAR ALERTS */}\n            <SignMessageSnackbar open={burning} />\n          </Paper>\n    );\n  }\n}\n\nBurnButton.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withRoot(connect(mapState, mapDispatch)(withStyles(styles)(BurnButton)));\n","import React, { Component } from 'react';\nimport withRoot from '../withRoot';\n\n// Material-ui\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from \"react-redux\";\n// Core Wallet Components\nimport Networks from './homePageComponents/Networks'\nimport Accounts from './homePageComponents/Accounts'\nimport MintButton from './homePageComponents/MintButton'\nimport EosMint from './homePageComponents/eos/MintButton'\nimport TronMint from './homePageComponents/tron/MintButton'\nimport Balances from './homePageComponents/Balances'\nimport TransferButton from './homePageComponents/TransferButton'\nimport TronTransfer from './homePageComponents/tron/TransferButton'\nimport BurnButton from './homePageComponents/BurnButton'\nimport EosBurn from './homePageComponents/eos/BurnButton'\nimport EosTransfer from './homePageComponents/eos/TransferButton'\nimport TronBurn from './homePageComponents/tron/BurnButton'\n\n\nconst styles = theme => ({\n});\n\n// Redux mappings\nconst mapState = state => ({\n  network: state.global.network\n});\n\nconst mapDispatch = dispatch => ({\n});\n\nclass HomePage extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n    };\n  }\n  \n\n  render() {\n    const {\n      network \n    } = this.props;\n\n    return (\n\n          <div>\n            {/* NETWORK SELECTOR */}\n              <Networks />\n            {/* USER IDENTITY  */}\n              <Accounts /> \n            {/* MINT  */\n              network == 0 ?\n              <MintButton /> : \n              ( network == 1 ? <EosMint/> :\n                (network == 2 ? <TronMint /> : \"\" )\n              )\n            }\n            {/* USER BALANCES  */\n              network == 0 ?\n              <Balances /> : <Balances />\n            }\n            {/* TRANSFER */\n              network == 0 ?\n              <TransferButton/> : \n              ( network == 1 ? <EosTransfer/> :\n                (network == 2 ? <TronTransfer /> : \"\" )\n              )\n            }\n            {/* BURN */\n              network == 0 ?\n              <BurnButton /> : \n              ( network == 1 ? <EosBurn/> :\n                (network == 2 ? <TronBurn /> : \"\" )\n              )\n            }\n          </div>\n    );\n  }\n}\n\nHomePage.propTypes = {\n};\n\nexport default withRoot(connect(mapState, mapDispatch)(withStyles(styles)(HomePage)));\n","import { ethers } from 'ethers';\n\n/** HELPER FUNCTIONS **/\n\n// See docs.ethers.io: If the progressCallback is specified, \n// it will be called periodically during encryption with a value between 0 and 1, \n// inclusive indicating the progress.\nfunction callback_encrypt(progress) {\n    let percentComplete = parseInt(progress * 100)\n    if ( percentComplete%20 === 0 ) {\n        console.log(\"Encrypting: \" + percentComplete + \"% complete\");\n    }\n}\n\n/** PUBLIC FUNCTIONS **/\n\n// Create a new random wallet and encrypt it in JSON form\n// @param password Password used to encrypt new JSON wallet\nconst createAccount = async (password) => {\n    let randomWallet = new ethers.Wallet.createRandom()\n    let encryptedJson = randomWallet\n    if (password) {\n        encryptedJson = await randomWallet.encrypt(password, callback_encrypt);\n    }\n    return encryptedJson\n}\n\nexport default createAccount","import React from 'react';\n\n\nconst Loading = () => (\n    <div>...</div>\n);\n\nexport default Loading;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport withRoot from '../../withRoot';\n\n// Material-ui\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport CircularProgress from '@material-ui/core/CircularProgress'\n\n// Redux state\nimport { connect } from \"react-redux\";\nimport { accountsActions, NETWORKS } from \"../../store/accountsActions\";\n\n// ETH Account Management Helper functions\nimport createAccount_eth from '../../eth_services/createAccount'\n\n// Helpers JSX\nimport Loading from '../helpers/Loading'\n\nconst styles = theme => ({\n    facebook2: {\n        color: '#6798e5',\n        animationDuration: '550ms',\n        position: 'absolute',\n        left: 0,\n    },\n});\n  \n// Redux mappings\nconst mapState = state => ({\n});\n  \nconst mapDispatch = dispatch => ({\n    addEthAccount: newAccount => dispatch(accountsActions.addEthAccount(newAccount)),\n});\n\nclass NewEthAccountDialog extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            creating_account: false\n        };\n    }\n\n    handleChange = name => event => {\n        this.setState({\n            [name]: event.target.value,\n        });\n    };\n\n    generateNewAccount = async () => {\n        let network = this.props.network\n\n        if (network === NETWORKS.ETH) {\n            this.setState({\n                creating_account: true\n            })\n            let new_account_json = await createAccount_eth()\n\n            this.props.addEthAccount(new_account_json)\n            this.setState({\n                creating_account: false\n            })\n        }\n        else if (network === NETWORKS.EOS) {\n            alert('EOS account management coming imminently')\n        } else {\n            alert('Sorry, we are looking to implement this network soon!')\n        }\n\n        // Close\n        this.props.onCloseHandler()\n        return\n    }\n\n    render() {\n\n        const { \n            open, \n            onCloseHandler,\n            classes\n        } = this.props;\n        const {\n            creating_account\n        } = this.state\n\n        return (\n            <div>\n                <Dialog\n                    open={open}\n                    onClose={onCloseHandler}\n                    aria-labelledby=\"form-dialog-title\"\n                >\n                    <DialogTitle id=\"form-dialog-title\">Create new burner wallet?</DialogTitle>\n                    <DialogContent>\n                    </DialogContent>\n                    <DialogActions>\n                    {creating_account ? (<Loading />) : \n                    (<Button onClick={onCloseHandler} color=\"primary\">\n                        Nevermind\n                    </Button>)}\n                    {creating_account ? \n                    (<Button\n                        disabled\n                        color=\"primary\"\n                    >\n                        <CircularProgress\n                            variant=\"indeterminate\"\n                            disableShrink\n                            className={classes.facebook2}\n                            size={24}\n                            thickness={4}\n                        />\n                    </Button>)\n                    : \n                    (<Button \n                        onClick={this.generateNewAccount} \n                        color=\"primary\"\n                    >\n                        Create\n                    </Button>)}\n                    </DialogActions>\n                </Dialog>\n            </div>\n        );\n    }\n}\n\nNewEthAccountDialog.propTypes = {\n    classes: PropTypes.object.isRequired,\n    open: PropTypes.bool.isRequired,\n    onCloseHandler: PropTypes.func.isRequired,\n    network: PropTypes.number.isRequired,\n};\n\nexport default connect(mapState, mapDispatch)(withRoot(withStyles(styles)(NewEthAccountDialog)));\n","/** HELPER FUNCTIONS **/\n\n// See docs.ethers.io: If the progressCallback is specified, \n// it will be called periodically during encryption with a value between 0 and 1, \n// inclusive indicating the progress.\nfunction callback_encrypt(progress) {\n    let percentComplete = parseInt(progress * 100)\n    if ( percentComplete%20 === 0 ) {\n        console.log(\"Encrypting: \" + percentComplete + \"% complete\");\n    }\n}\n\n/** PUBLIC FUNCTIONS **/\n\n// Encrypt JSON wallet\n// @param password Password used to encrypt JSON wallet\nconst encryptAccount = async (password, wallet_json) => {\n    let encryptedJson\n    if (wallet_json) {\n        encryptedJson = await wallet_json.encrypt(password, callback_encrypt);\n    }\n    return encryptedJson\n}\n\nexport default encryptAccount","import { ethers } from 'ethers';\n\n// Get the Wallet address from an encrypted JSON wallet\nconst getJsonAddress = (encryptedJson) => {\n    let data = encryptedJson.toString()\n    let address = ethers.utils.getJsonWalletAddress(data);\n    return address\n}\n\nexport default getJsonAddress\n","// REST API server\nimport axios from 'axios'\nimport config from '../config'\nconst SERVER = config.server_url\nconst WALLETS_ENDPOINT = SERVER+\"api/accounts/wallets\"\n\nconst saveAccountToUser = async (username, password, chainId, eth_address, encrypted_json) => {\n    try {\n        let post_data = {\n            user: username,\n            password: password,\n            chainId: chainId.toString(),\n            accountName: eth_address,\n            wallet: JSON.stringify(encrypted_json)\n        }\n        console.log(post_data)\n\n        let db_post_response = await axios.post(\n            WALLETS_ENDPOINT,\n            post_data\n          );\n\n        // if successfully created wallet\n        if (db_post_response.data) {\n            let new_wallets_key = db_post_response.data.key\n            let new_wallet = JSON.parse(db_post_response.data.value)\n            return {\n                wallet_key: new_wallets_key,\n                wallet: new_wallet\n            }\n        } else {\n            console.log('user does not exist')\n            return false\n        }\n    } catch(err) {\n        console.log('unable to connect users accounts database: ', WALLETS_ENDPOINT)\n        return false\n    }\n    \n}\n\nexport default saveAccountToUser","import React, { Component } from 'react';\nimport withRoot from '../../withRoot';\nimport PropTypes from 'prop-types';\n\n// Material-ui\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport Save from '@material-ui/icons/Save';\n\n// Redux state\nimport { connect } from \"react-redux\";\nimport { NETWORKS } from \"../../store/accountsActions\";\n\n// Wallet management helpers\nimport createEncryptedWallet from '../../eth_services/encryptAccount'\nimport getJsonAddress from '../../eth_services/getJsonAddress'\nimport saveAccountToUser from '../../db_services/saveAccountToUser'\n\nconst styles = theme => ({\n  paper: {\n    paddingTop: theme.spacing.unit * 2,\n    paddingBottom: theme.spacing.unit * 2,\n    marginTop: theme.spacing.unit * 2,\n    marginBottom: theme.spacing.unit * 1,\n    marginLeft: theme.spacing.unit * 5,\n    marginRight: theme.spacing.unit * 5,\n  },\n  section: {\n    marginTop: theme.spacing.unit * 2,\n    marginBottom: theme.spacing.unit * 2,\n    marginLeft: theme.spacing.unit * 2,\n    marginRight: theme.spacing.unit * 2,\n    textAlign: 'left'\n  },\n  facebook2: {\n    color: '#6798e5',\n    animationDuration: '550ms',\n    position: 'absolute',\n  },\n});\n\n// Redux mappings\nconst mapState = state => ({\n  eth_accounts: state.accounts.eth_accounts,\n  username: state.global.username,\n  password: state.global.password\n});\n\nconst mapDispatch = dispatch => ({\n});\n\nclass SaveEthAccountDialog extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      open_new_account_dialog: false,\n      saving: false\n    };\n  }\n  // Encrypt wallet data with user's password\n  saveAccount = async (new_account_index) => {\n    let identityToAssociateWithAccount = this.props.username\n    let new_account = (\n      new_account_index < this.props.eth_accounts.length \n      ? this.props.eth_accounts[new_account_index] \n      : null)\n    let password = this.props.password\n    let chainId = NETWORKS.ETH \n\n    if (identityToAssociateWithAccount && new_account) {\n      \n      // Encrypt json wallet\n      try {\n        this.setState({\n          saving: true\n        })\n\n        // Set up body of API request\n        let encrypted_json = await createEncryptedWallet(password, new_account)\n        let address_from_encrypted_json = getJsonAddress(encrypted_json)\n\n        let saved_wallet = await saveAccountToUser(\n          identityToAssociateWithAccount, \n          password,\n          chainId,\n          address_from_encrypted_json,\n          encrypted_json\n        )\n\n        if (saved_wallet) {\n            // Successfully saved account\n            let wallet_key = saved_wallet.wallet_key\n\n            console.log('saved wallet to user (' + identityToAssociateWithAccount + '): ' + wallet_key)\n        } \n\n        this.setState({\n          saving: false\n        })\n\n  \n      } catch (err) {\n        console.log('ERROR: could not save wallet data')\n        this.setState({\n          saving: false\n        })\n        return\n      }\n\n    } else {\n      alert('cannot save to this account')\n      return\n    }\n  }\n\n  render() {\n\n    const { \n      classes,\n      account_index\n    } = this.props;\n    const {\n      saving\n    } = this.state\n\n    return (      \n        <Button\n          onClick={() => this.saveAccount(account_index)}\n        >\n          {saving ? \n          (<CircularProgress\n              variant=\"indeterminate\"\n              disableShrink\n              className={classes.facebook2}\n              size={24}\n              thickness={4}\n          />) : \n          (\n            <Save />\n          )}\n        </Button>         \n    )\n  }\n}\n\nSaveEthAccountDialog.propTypes = {\n  classes: PropTypes.object.isRequired,\n  account_index: PropTypes.number.isRequired\n};\n\nexport default connect(mapState, mapDispatch)(withRoot(withStyles(styles)(SaveEthAccountDialog)));\n","import React, { Component } from 'react';\nimport withRoot from '../../withRoot';\nimport PropTypes from 'prop-types';\n\n// Material-ui\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper'\nimport Typography from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button'\n\n// Redux state\nimport { connect } from \"react-redux\";\nimport { NETWORKS } from \"../../store/accountsActions\";\n\n// Custom Components\nimport EtherscanLogo from '../helpers/EtherscanLogo'\nimport NewEthAccountDialog from './NewEthAccountDialog'\nimport SaveEthAccountDialog from './SaveEthAccountDialog'\n\nconst styles = theme => ({\n  paper: {\n    paddingTop: theme.spacing.unit * 2,\n    paddingBottom: theme.spacing.unit * 2,\n    marginTop: theme.spacing.unit * 2,\n    marginBottom: theme.spacing.unit * 1,\n    marginLeft: theme.spacing.unit * 5,\n    marginRight: theme.spacing.unit * 5,\n  },\n  section: {\n    marginTop: theme.spacing.unit * 2,\n    marginBottom: theme.spacing.unit * 2,\n    marginLeft: theme.spacing.unit * 2,\n    marginRight: theme.spacing.unit * 2,\n    textAlign: 'left'\n  },\n  facebook2: {\n    color: '#6798e5',\n    animationDuration: '550ms',\n    position: 'absolute',\n  },\n});\n\n// Redux mappings\nconst mapState = state => ({\n  eth_accounts: state.accounts.eth_accounts,\n  username: state.global.username,\n  password: state.global.password\n});\n\nconst mapDispatch = dispatch => ({\n});\n\nclass EthAccounts extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      open_new_account_dialog: false,\n    };\n  }\n\n  handleClick_AddEthAccount = async () => {\n    this.setState({\n      open_new_account_dialog: true\n    })\n  }\n\n  handleClose_AddEthAccount = () => {\n    this.setState({\n      open_new_account_dialog: false\n    })\n  }\n\n  render() {\n\n    const { \n      classes, \n      eth_accounts,\n      username\n    } = this.props;\n    const {\n      open_new_account_dialog,\n    } = this.state\n\n    return (\n        <Paper className={classes.paper} elevation={3}>\n              <Typography variant=\"body1\" className={classes.section}> \n                  <b>Eth Wallets</b>: \n              </Typography>\n              {/* Add Eth Accounts */}\n              <Button \n                variant=\"contained\" \n                onClick={this.handleClick_AddEthAccount}\n                disabled={false}\n              >\n                New\n              </Button>\n              {/* View Eth Accounts */}\n              { eth_accounts.length > 0 ? (\n              <div>\n                {eth_accounts.map((account, i) => {\n                  return (<Typography key={i}> \n                    <EtherscanLogo /> ({i}): \n                    <a\n                      href={\"https://ropsten.etherscan.io/address/\" + account.address}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      {\" view account\"}\n                    </a>\n                    {/* save ETH account to signed in user */}\n                    {username && (\n                      <SaveEthAccountDialog account_index={i}/>\n                    )}\n                  </Typography>)\n                })}\n              </div> ) : (\"\")}\n              <NewEthAccountDialog \n                open={open_new_account_dialog} \n                onCloseHandler={this.handleClose_AddEthAccount} \n                network={NETWORKS.ETH}\n              />\n        </Paper >\n    )\n  }\n}\n\nEthAccounts.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default connect(mapState, mapDispatch)(withRoot(withStyles(styles)(EthAccounts)));\n","import React, { Component } from 'react';\nimport withRoot from '../../withRoot';\nimport PropTypes from 'prop-types';\n\n// Material-ui\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper'\nimport Typography from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button'\n\n// Redux state\nimport { connect } from \"react-redux\";\nimport { accountsActions } from \"../../store/accountsActions\";\n\n// Custom Components\nimport BloksLogo from '../helpers/BloksLogo'\n\nconst styles = theme => ({\n  paper: {\n    paddingTop: theme.spacing.unit * 2,\n    paddingBottom: theme.spacing.unit * 2,\n    marginTop: theme.spacing.unit * 2,\n    marginBottom: theme.spacing.unit * 1,\n    marginLeft: theme.spacing.unit * 5,\n    marginRight: theme.spacing.unit * 5,\n  },\n  section: {\n    marginTop: theme.spacing.unit * 2,\n    marginBottom: theme.spacing.unit * 2,\n    marginLeft: theme.spacing.unit * 2,\n    marginRight: theme.spacing.unit * 2,\n    textAlign: 'left'\n  }\n});\n\n// Redux mappings\nconst mapState = state => ({\n  eos_accounts: state.accounts.eos_accounts,\n});\n\nconst mapDispatch = dispatch => ({\n  addEosAccount: newAccount => dispatch(accountsActions.addEosAccount(newAccount)),\n});\n\nclass EosAccounts extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n    };\n  }\n\n  handleClick_AddEosAccount = async () => {\n    alert('EOS accounts coming soon 🤥')\n    let new_account = \"placeholder-\"+this.props.eos_accounts.length.toString()\n\n    this.props.addEosAccount(new_account)\n  }\n\n  render() {\n\n    const { \n      classes, \n      eos_accounts,\n    } = this.props;\n\n    return (\n        <Paper className={classes.paper} elevation={3}>\n              <Typography variant=\"body1\" className={classes.section}> \n                  <b>EOS Wallets</b>: \n              </Typography>\n              {/* Add EOS Accounts */}\n              <Button \n                variant=\"contained\" \n                onClick={this.handleClick_AddEosAccount}\n                disabled={false}\n              >\n                New\n              </Button>\n              {/* View EOS Accounts */}\n              { eos_accounts.length > 0 ? (\n              <div>\n                {eos_accounts.map((account, i) => {\n                  return (<Typography key={i}> \n                    <BloksLogo /> ({i}): \n                    <a\n                      href={\"https://bloks.io/account/\" + account}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      {\" view account\"}\n                    </a>\n                  </Typography>)\n                })}\n              </div> ) : (\"\")}\n        </Paper >\n    )\n  }\n}\n\nEosAccounts.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default connect(mapState, mapDispatch)(withRoot(withStyles(styles)(EosAccounts)));\n","// REST API server\nimport axios from 'axios'\nimport config from '../config'\nconst SERVER = config.server_url\nconst USERS_ENDPOINT = SERVER+\"api/accounts/users\"\n\nconst saveUser = async (username, password) => {\n    try {\n        let post_data = {\n            user: username,\n            password: password, \n        }\n\n        let db_post_response = await axios.post(\n            USERS_ENDPOINT,\n            post_data\n          );\n\n        // if successfully created new user\n        if (db_post_response.data) {\n            let new_user_id = db_post_response.data.key\n            let new_password = db_post_response.data.value\n            return {\n                user: new_user_id,\n                password: new_password\n            }\n        } else {\n            // user already exists or error\n            console.log('user already exists or error')\n            return false\n        }\n    } catch(err) {\n        console.log('unable to connect users accounts database: ', USERS_ENDPOINT)\n        return false\n    }\n    \n}\n\nexport default saveUser","// REST API server\nimport axios from 'axios'\nimport config from '../config'\n\nconst SERVER = config.server_url\nconst USERS_ENDPOINT = SERVER+\"api/accounts/users\"\n\n\nconst loginUser = async (username, password) => {\n    let params = {\n        user: username,\n        password: password, \n    }\n    try {\n        let db_get_response = await axios.get(\n            USERS_ENDPOINT,\n            { params }\n          );\n        \n        // if successfully signed in user\n        if (db_get_response.data) {\n            let user_id = db_get_response.data.key\n            let user_password = db_get_response.data.value.password\n            let user_wallets = db_get_response.data.value.chainAccounts\n            return {\n                user: user_id,\n                password: user_password,\n                wallets: user_wallets\n            }\n        } else {\n            console.log('user does not exist')\n            return false\n        }\n    } catch(err) {\n        console.log('invalid username password combo: ', params)\n        return false\n    }\n    \n}\n\nexport default loginUser","import { ethers } from 'ethers';\n\n/** HELPER FUNCTIONS **/\n\nfunction callback_decrypt(progress) {\n    // let percentComplete = parseInt(progress * 100)\n    // if ( percentComplete%20 === 0 ) {\n    //     console.log(\"Decrypting: \" + percentComplete + \"% complete\");\n    // }\n}\n\n/** PUBLIC FUNCTIONS **/\n\n// Decrypt walletJSON file with password\nconst unlockWallet = async (encryptedJsonFile, password) => {\n    try {\n        let data = encryptedJsonFile\n        return await ethers.Wallet.fromEncryptedJson(data, password, callback_decrypt)\n    } catch(err) {\n        throw err\n    }\n}\n\nexport default unlockWallet","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport withRoot from '../../withRoot';\n\n// Material-ui\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Switch from '@material-ui/core/Switch'\n\n// REST API Calls\nimport saveUser from '../../db_services/saveUser'\nimport loginUser from '../../db_services/loginUser'\n\n// ETH Account Management helpers\nimport unlockAccount from '../../eth_services/unlockAccount'\n\n// Redux state\nimport { connect } from \"react-redux\";\nimport { globalActions } from '../../store/globalActions';\nimport { NETWORKS, accountsActions } from '../../store/accountsActions'\n\n// Helpers JSX\nimport Loading from '../helpers/Loading'\n\nconst styles = theme => ({\n    facebook2: {\n        color: '#6798e5',\n        animationDuration: '550ms',\n        position: 'absolute',\n        left: 0,\n    },\n});\n  \n// Redux mappings\nconst mapState = state => ({\n});\n  \nconst mapDispatch = dispatch => ({\n    setUsername: name => dispatch(globalActions.setUsername(name)),\n    setPassword: password => dispatch(globalActions.setPassword(password)),\n    addEthAccount: newAccount => dispatch(accountsActions.addEthAccount(newAccount)),\n    clearEthAccounts: () => dispatch(accountsActions.clearEthAccounts())\n});\n\nclass IdentityDialog extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            username: '',\n            password: '',\n            confirm_password: '',\n            loading_server: false,\n            openSignInDialog: false\n        };\n    }\n\n    handleChange = name => event => {\n        this.setState({\n            [name]: event.target.value,\n        });\n    };\n\n    // Create a brand new identity\n    generateNewAccount = async () => {\n\n        // First clear out old accounts\n        this.props.clearEthAccounts()\n\n        let username = this.state.username\n        let password = this.state.password\n        let confirm_password = this.state.confirm_password\n\n        let isValidAccount = Boolean(\n            username && \n            password &&\n            confirm_password &&\n            (password === confirm_password)\n        )\n        if (!isValidAccount) {\n            alert('cannot create this account')\n            return\n        }\n\n        // Attempt to create new user\n        try {\n            this.setState({\n                loading_server: true\n            })\n            let new_user = await saveUser(username, password)\n            if (new_user) {\n                // Successfully created new user\n                let new_username = new_user.user\n                console.log('created a new user: ', new_username)\n                // Now, \"sign in\" new user\n                this.props.setUsername(username)\n                this.props.setPassword(password)\n                // Close\n                this.props.onCloseHandler()\n            }\n            this.setState({\n                loading_server: false\n            })\n\n            return\n        } catch (err) {\n            console.log('ERROR: could not save user data')\n            this.setState({\n                loading_server: false\n            })\n            return\n        }\n    }\n\n    // Sign in to an existing identity \n    signInOldAccount = async () => {\n\n        // First clear out old accounts\n        this.props.clearEthAccounts()\n\n        let username = this.state.username\n        let password = this.state.password\n\n\n        // Attempt to get existing user\n        try {\n            this.setState({\n                loading_server: true\n            })\n            let existing_user = await loginUser(username, password)\n            if (existing_user) {\n                // Successfully logged in new user\n                let existing_username = existing_user.user\n                let existing_password = existing_user.password\n\n                console.log('signed in existing user: ', existing_username)\n                // Now, \"sign in\" new user\n                this.props.setUsername(existing_username)\n                this.props.setPassword(existing_password)\n\n                // Set user accounts\n                let existing_wallets = existing_user.wallets\n                let eth_accounts = existing_wallets[NETWORKS.ETH]\n\n                if (eth_accounts.length > 0) {\n                    console.log(\"loading \" + eth_accounts.length + \" wallets\")\n                    for (var i = 0; i < eth_accounts.length; i++) {\n                        let wallet = eth_accounts[i]\n                        let address = Object.keys(wallet)[0]\n                        console.log('address: ', address)\n                        let encrypted_wallet = JSON.parse(wallet[address])\n                        let decrypted_wallet = await unlockAccount(encrypted_wallet, password)\n                        this.props.addEthAccount(decrypted_wallet)\n                    }\n                }\n                \n                // Close\n                this.props.onCloseHandler()\n            }\n            this.setState({\n                loading_server: false\n            })\n\n            return\n        } catch (err) {\n            console.log('ERROR: could not sign in user')\n            this.setState({\n                loading_server: false\n            })\n            return\n        }\n    }\n\n    // Switch between sign in and new account dialogs\n    toggleSignInDialog = () => {\n        let showSignIn = this.state.openSignInDialog\n        this.setState({\n            openSignInDialog: !showSignIn\n        })\n    }\n\n    render() {\n\n        const { \n            open, \n            onCloseHandler,\n            classes\n        } = this.props;\n        const {\n            username,\n            password,\n            confirm_password,\n            loading_server,\n            openSignInDialog\n        } = this.state\n\n        const canCreateNew = Boolean(username && password && confirm_password && (password === confirm_password))\n        const canSignIn = Boolean(username && password)\n\n        return (\n            <div>\n                <Dialog\n                    open={open}\n                    onClose={onCloseHandler}\n                    aria-labelledby=\"form-dialog-title\"\n                >\n                    <DialogTitle id=\"form-dialog-title\">Accounts</DialogTitle>\n                    <DialogContent>\n                    <DialogContentText>\n                        <FormControlLabel\n                            control={\n                            <Switch\n                                checked={openSignInDialog}\n                                onChange={this.toggleSignInDialog}\n                                value=\"openSignInDialog\"\n                                color=\"primary\"\n                            />\n                            }\n                            label=\"Already have an account?\"\n                        />\n                    </DialogContentText>\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"username\"\n                        label=\"Username\"\n                        type=\"name\"\n                        onChange={this.handleChange('username')}\n                        fullWidth\n                    />\n                    <TextField\n                        margin=\"dense\"\n                        id=\"password\"\n                        label=\"Password\"\n                        type=\"password\"\n                        onChange={this.handleChange('password')}\n                        fullWidth\n                    />\n                    {!openSignInDialog ? (<TextField\n                        margin=\"dense\"\n                        id=\"confirm-password\"\n                        label=\"Confirm Password\"\n                        type=\"password\"\n                        onChange={this.handleChange('confirm_password')}\n                        fullWidth\n                    />) : (\"\")}\n                    </DialogContent>\n                    <DialogActions>\n                    {loading_server ? (<Loading />) : \n                    (<Button onClick={onCloseHandler} color=\"primary\">\n                        Nevermind\n                    </Button>)}\n                    {loading_server ? \n                    (<Button\n                        disabled\n                        color=\"primary\"\n                    >\n                        <CircularProgress\n                            variant=\"indeterminate\"\n                            disableShrink\n                            className={classes.facebook2}\n                            size={24}\n                            thickness={4}\n                        />\n                    </Button>)\n                    : \n                    (<Button \n                        onClick={openSignInDialog ? this.signInOldAccount : this.generateNewAccount} \n                        color=\"primary\"\n                        disabled={openSignInDialog ? !(canSignIn) : !(canCreateNew) }\n                    >\n                        {openSignInDialog ? \"Sign in\" : \"Create\"}\n                    </Button>)}\n                    </DialogActions>\n                </Dialog>\n            </div>\n        );\n    }\n}\n\nIdentityDialog.propTypes = {\n    classes: PropTypes.object.isRequired,\n    open: PropTypes.bool.isRequired,\n    onCloseHandler: PropTypes.func.isRequired,\n};\n\nexport default connect(mapState, mapDispatch)(withRoot(withStyles(styles)(IdentityDialog)));\n","import React, { Component } from 'react';\nimport withRoot from '../withRoot';\nimport PropTypes from 'prop-types';\n\n// Material-ui\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper'\nimport Typography from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport Clear from '@material-ui/icons/Clear';\nimport Tooltip from '@material-ui/core/Tooltip';\n\n// Redux state\nimport { connect } from \"react-redux\";\nimport { globalActions } from \"../store/globalActions\";\nimport { accountsActions } from \"../store/accountsActions\";\n\n// Custom Components\nimport EthAccounts from './accountsComponents/EthAccounts'\nimport EosAccounts from './accountsComponents/EosAccounts'\nimport IdentityDialog from './accountsComponents/IdentityDialog'\n\nconst styles = theme => ({\n  paper: {\n    paddingTop: theme.spacing.unit * 2,\n    paddingBottom: theme.spacing.unit * 2,\n    marginTop: theme.spacing.unit * 2,\n    marginBottom: theme.spacing.unit * 1,\n    marginLeft: theme.spacing.unit * 5,\n    marginRight: theme.spacing.unit * 5,\n  },\n  button: {\n    marginTop: theme.spacing.unit * 2,\n    marginBottom: theme.spacing.unit * 2,\n    marginLeft: theme.spacing.unit * 2,\n    marginRight: theme.spacing.unit * 2,\n    textAlign: 'left'\n  },\n});\n\n// Redux mappings\nconst mapState = state => ({\n  username: state.global.username,\n  password: state.global.password\n});\n\nconst mapDispatch = dispatch => ({\n  setUsername: name => dispatch(globalActions.setUsername(name)),\n  setPassword: password => dispatch(globalActions.setPassword(password)),\n  clearEthAccounts: () => dispatch(accountsActions.clearEthAccounts())\n});\n\nclass AccountsPage extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      openIdentityDialog: false\n    };\n  }\n\n  generateNewIdentity = () => {\n    this.setState({\n      openIdentityDialog: true\n    })\n  }\n\n  // Clear identity\n  logoutIdentity = () => {\n    this.props.setUsername('')\n    this.props.setPassword('')\n    this.props.clearEthAccounts()\n  }\n\n  closeIdentityDialog = () => {\n    this.setState({\n      openIdentityDialog: false\n    })\n  }\n\n  render() {\n\n    const { \n      classes, \n      username,\n      password\n    } = this.props;\n    const {\n      openIdentityDialog\n    } = this.state;\n\n    const signed_in = (username && password)\n    const wallet_name = (username ? username+\"'s Account\" : \"No Account\")\n    const hover_text = \"These burner wallets will self-destruct when you leave the page unless you choose to save them to your account\"\n\n    return (\n        <div>\n        <Paper className={classes.paper} elevation={3}>\n            <Tooltip title={hover_text} placement=\"top\">\n              {/* Create a new account */}\n              <Typography variant=\"subtitle1\" className={classes.button}> \n                  <Button \n                    color=\"primary\" \n                    aria-label=\"New Account\"\n                    onClick={this.generateNewIdentity}\n                  >\n                    <AccountCircle />\n                    {wallet_name}\n                  </Button>\n              </Typography>\n            </Tooltip>\n            {/* Sign out of account */}\n            {signed_in && (<Typography variant=\"subtitle1\" className={classes.button}> \n                <Button \n                  color=\"primary\" \n                  aria-label=\"Logout\"\n                  onClick={this.logoutIdentity}\n                >\n                  <Clear />\n                  Logout\n                </Button>\n            </Typography>)}\n            <IdentityDialog open={openIdentityDialog} onCloseHandler={this.closeIdentityDialog} />\n            {/* ETH  */}\n            <EthAccounts />\n            {/* EOS  */}\n            <EosAccounts />\n        </Paper>\n        </div>\n    )\n  }\n}\n\nAccountsPage.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default connect(mapState, mapDispatch)(withRoot(withStyles(styles)(AccountsPage)));\n","import React, { Component } from 'react';\nimport withRoot from '../withRoot';\nimport PropTypes from 'prop-types';\n\n// Material-ui\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper'\nimport Typography from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button'\n\nconst styles = theme => ({\n  paper: {\n    paddingTop: theme.spacing.unit * 2,\n    paddingBottom: theme.spacing.unit * 2,\n    marginTop: theme.spacing.unit * 2,\n    marginBottom: theme.spacing.unit * 1,\n    marginLeft: theme.spacing.unit * 5,\n    marginRight: theme.spacing.unit * 5,\n  },\n  section: {\n    marginTop: theme.spacing.unit * 2,\n    marginBottom: theme.spacing.unit * 2,\n    marginLeft: theme.spacing.unit * 2,\n    marginRight: theme.spacing.unit * 2,\n    textAlign: 'left'\n  }\n});\n\nclass InformationPage extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n    };\n  }\n\n  render() {\n\n    const { \n      classes, \n    } = this.props;\n\n    return (\n        <div>\n        <Paper className={classes.paper} elevation={3}>\n            <Typography variant=\"body1\" className={classes.section}> \n                <b>A Universal Wallet for a Global Digital Market</b>: This is the embodiment of our cross-chain open-source wallet initiative where we intend to link user \n                identities with cryptonetwork accounts. We support the following cryptonetwork testnets: Ethereum (Ropsten), EOS (Jungle), and Tron (Shasta).\n            </Typography>\n            <Typography variant=\"body1\" className={classes.section}> \n                <b>CUSD Testnet Faucet</b>: Mint, transfer, and redeem CUSD via our token faucet on a testnet. CUSD was <i>made for developers</i> and experimental minds \n                curious how cryptoeconomics succeed at scale 👩🏽‍🚀\n            </Typography>\n            <Typography variant=\"body1\" className={classes.section}> \n                <b>Ethereum MetaTransactions</b>: We are powered by \"metatransactions\", in which users do not have to pay ETH transaction fees on this portal.  We pay your ETH gas fees, you pay us back in CUSD. 🧞‍\n            </Typography>\n            <Typography variant=\"body1\" className={classes.section}> \n                <b>Account Management</b>: No cryptonetwork account? No problem, you can create a <i>burner</i> account\n                through our management portal. We will <b>never</b> store your keys or passwords because these burner accounts were designed to self-destruct.\n                For top security, move CUSD to a more secure cold-storage wallet like Scatter or Metamask! 🗝💵🗝\n            </Typography>\n        </Paper>\n        <Paper className={classes.paper} elevation={3}>\n            <a href=\"https://github.com/nicholaspai/cusd-faucet-client\" target=\"_blank\" rel=\"noopener noreferrer\">\n              <Button variant=\"contained\" className={classes.section}> \n                Github Repo\n              </Button>\n            </a>\n        </Paper>\n        </div>\n    )\n  }\n}\n\nInformationPage.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withRoot(withStyles(styles)(InformationPage));\n","import React, { Component } from 'react';\nimport './App.css';\nimport withRoot from './withRoot';\nimport PropTypes from 'prop-types';\n\n// Material-ui\nimport { withStyles } from '@material-ui/core/styles';\n\n// Redux state\nimport { connect } from \"react-redux\";\nimport { globalActions, PAGES } from \"./store/globalActions\";\n\n// Core Wallet Pages + Header\nimport Header from './components/Header'\nimport HomePage from './components/HomePage'\nimport AccountsPage from './components/AccountsPage'\nimport InformationPage from './components/InformationPage'\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1\n  },\n  main: {\n    textAlign: 'center',\n    paddingTop: theme.spacing.unit * 5,\n  },\n  information: {\n    textAlign: 'center',\n    paddingTop: theme.spacing.unit * 5,\n  },\n  accounts: {\n    textAlign: 'center',\n    paddingTop: theme.spacing.unit * 5,\n  }\n});\n\n// Redux mappings\nconst mapState = state => ({\n  page: state.global.page,\n});\n\nconst mapDispatch = dispatch => ({\n});\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n    };\n  }\n\n  /** ACTIONS TO PERFORM ON LOAD */\n  componentDidMount = async () => {\n  }\n\n  render() {\n\n    const { \n      classes,\n      page \n    } = this.props;\n\n    return (\n      <div className={classes.root}>\n        <Header />\n        { page === PAGES.MAIN ? (\n          <div className={classes.main}>\n            <HomePage />\n          </div>\n        ): (\"\")}\n        { page === PAGES.INFO ? (\n          <div className={classes.information}>\n            <InformationPage />\n          </div>\n        ): (\"\")}\n        { page === PAGES.ACCOUNTS ? (\n          <div className={classes.accounts}>\n            <AccountsPage />\n          </div>\n        ): (\"\")}\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withRoot(connect(mapState, mapDispatch)(withStyles(styles)(App)));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}